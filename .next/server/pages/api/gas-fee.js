"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/gas-fee";
exports.ids = ["pages/api/gas-fee"];
exports.modules = {

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("pg");

/***/ }),

/***/ "(api)/./config/database.js":
/*!****************************!*\
  !*** ./config/database.js ***!
  \****************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nconst { Pool  } = __webpack_require__(/*! pg */ \"pg\");\nconst pool = new Pool({\n    user: process.env.DB_USER || process.env.USER,\n    host: process.env.DB_HOST || \"localhost\",\n    database: process.env.DB_NAME || \"crowdfunding\",\n    password: process.env.DB_PASSWORD || \"\",\n    port: process.env.DB_PORT || 5432\n});\nmodule.exports = {\n    query: (text, params)=>pool.query(text, params),\n    pool\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9jb25maWcvZGF0YWJhc2UuanMuanMiLCJtYXBwaW5ncyI6IjtBQUFBLE1BQU0sRUFBRUEsS0FBSSxFQUFFLEdBQUdDLG1CQUFPQSxDQUFDO0FBRXpCLE1BQU1DLE9BQU8sSUFBSUYsS0FBSztJQUNsQkcsTUFBTUMsUUFBUUMsR0FBRyxDQUFDQyxPQUFPLElBQUlGLFFBQVFDLEdBQUcsQ0FBQ0UsSUFBSTtJQUM3Q0MsTUFBTUosUUFBUUMsR0FBRyxDQUFDSSxPQUFPLElBQUk7SUFDN0JDLFVBQVVOLFFBQVFDLEdBQUcsQ0FBQ00sT0FBTyxJQUFJO0lBQ2pDQyxVQUFVUixRQUFRQyxHQUFHLENBQUNRLFdBQVcsSUFBSTtJQUNyQ0MsTUFBTVYsUUFBUUMsR0FBRyxDQUFDVSxPQUFPLElBQUk7QUFDakM7QUFFQUMsT0FBT0MsT0FBTyxHQUFHO0lBQ2JDLE9BQU8sQ0FBQ0MsTUFBTUMsU0FBV2xCLEtBQUtnQixLQUFLLENBQUNDLE1BQU1DO0lBQzFDbEI7QUFDSiIsInNvdXJjZXMiOlsid2VicGFjazovL2Nyb3dkZnVuZGluZy8uL2NvbmZpZy9kYXRhYmFzZS5qcz82OTJhIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgUG9vbCB9ID0gcmVxdWlyZSgncGcnKTtcblxuY29uc3QgcG9vbCA9IG5ldyBQb29sKHtcbiAgICB1c2VyOiBwcm9jZXNzLmVudi5EQl9VU0VSIHx8IHByb2Nlc3MuZW52LlVTRVIsXG4gICAgaG9zdDogcHJvY2Vzcy5lbnYuREJfSE9TVCB8fCAnbG9jYWxob3N0JyxcbiAgICBkYXRhYmFzZTogcHJvY2Vzcy5lbnYuREJfTkFNRSB8fCAnY3Jvd2RmdW5kaW5nJyxcbiAgICBwYXNzd29yZDogcHJvY2Vzcy5lbnYuREJfUEFTU1dPUkQgfHwgJycsXG4gICAgcG9ydDogcHJvY2Vzcy5lbnYuREJfUE9SVCB8fCA1NDMyLFxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHF1ZXJ5OiAodGV4dCwgcGFyYW1zKSA9PiBwb29sLnF1ZXJ5KHRleHQsIHBhcmFtcyksXG4gICAgcG9vbFxufTsgIl0sIm5hbWVzIjpbIlBvb2wiLCJyZXF1aXJlIiwicG9vbCIsInVzZXIiLCJwcm9jZXNzIiwiZW52IiwiREJfVVNFUiIsIlVTRVIiLCJob3N0IiwiREJfSE9TVCIsImRhdGFiYXNlIiwiREJfTkFNRSIsInBhc3N3b3JkIiwiREJfUEFTU1dPUkQiLCJwb3J0IiwiREJfUE9SVCIsIm1vZHVsZSIsImV4cG9ydHMiLCJxdWVyeSIsInRleHQiLCJwYXJhbXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./config/database.js\n");

/***/ }),

/***/ "(api)/./pages/api/gas-fee.js":
/*!******************************!*\
  !*** ./pages/api/gas-fee.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _config_database__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config/database */ \"(api)/./config/database.js\");\n/* harmony import */ var _config_database__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_config_database__WEBPACK_IMPORTED_MODULE_0__);\n\nasync function handler(req, res) {\n    if (req.method === \"POST\") {\n        try {\n            const { campaignId , donatorAddress , donationAmount , gasFee , maxFee , gasPrice , gasLimit , contractVersion , isSuccess , campaignTitle , methodName  } = req.body;\n            const query = `\n        INSERT INTO gas_fee_logs (\n          campaign_id,\n          donator_address,\n          donation_amount,\n          gas_fee,\n          max_fee,\n          gas_price,\n          gas_limit,\n          contract_version,\n          is_success,\n          campaign_title,\n          method_name\n        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)\n        RETURNING *;\n      `;\n            const values = [\n                campaignId,\n                donatorAddress,\n                donationAmount,\n                gasFee,\n                maxFee,\n                gasPrice,\n                gasLimit,\n                contractVersion || \"original\",\n                isSuccess,\n                campaignTitle || \"\",\n                methodName || \"\"\n            ];\n            const result = await _config_database__WEBPACK_IMPORTED_MODULE_0__.pool.query(query, values);\n            res.status(200).json(result.rows[0]);\n        } catch (error) {\n            console.error(\"Error logging gas fee:\", error);\n            res.status(500).json({\n                error: error.message || \"Failed to log gas fee\"\n            });\n        }\n    } else if (req.method === \"GET\") {\n        try {\n            const { campaignId , timeRange , contractVersion , page =1 , limit =10  } = req.query;\n            let query = `\n        SELECT \n          g.*,\n          COUNT(*) OVER() as total_count,\n          AVG(gas_fee) OVER() as avg_gas_fee,\n          SUM(gas_fee) OVER() as total_gas_fee,\n          campaign_title,\n          method_name\n        FROM gas_fee_logs g\n        WHERE 1=1\n      `;\n            const values = [];\n            let paramCount = 1;\n            if (campaignId && campaignId !== \"all\") {\n                query += ` AND campaign_id = $${paramCount}`;\n                values.push(campaignId);\n                paramCount++;\n            }\n            if (contractVersion && contractVersion !== \"all\") {\n                query += ` AND contract_version = $${paramCount}`;\n                values.push(contractVersion);\n                paramCount++;\n            }\n            if (timeRange && timeRange !== \"all\") {\n                const now = new Date();\n                let startDate;\n                switch(timeRange){\n                    case \"24h\":\n                        startDate = new Date(now - 24 * 60 * 60 * 1000);\n                        break;\n                    case \"7d\":\n                        startDate = new Date(now - 7 * 24 * 60 * 60 * 1000);\n                        break;\n                    case \"30d\":\n                        startDate = new Date(now - 30 * 24 * 60 * 60 * 1000);\n                        break;\n                    default:\n                        startDate = new Date(0);\n                }\n                query += ` AND timestamp >= $${paramCount}`;\n                values.push(startDate);\n                paramCount++;\n            }\n            // Add pagination\n            const offset = (parseInt(page) - 1) * parseInt(limit);\n            query += ` ORDER BY timestamp DESC LIMIT $${paramCount} OFFSET $${paramCount + 1}`;\n            values.push(parseInt(limit), offset);\n            const result = await _config_database__WEBPACK_IMPORTED_MODULE_0__.pool.query(query, values);\n            // If this is a campaign-specific request (for PopUp), return just the transactions\n            if (campaignId && campaignId !== \"all\") {\n                res.status(200).json({\n                    transactions: result.rows\n                });\n                return;\n            }\n            // For gas stats page, group data by contract version\n            const groupedData = {\n                original: [],\n                optimized: [],\n                variablePacking: [],\n                batchProcessing: []\n            };\n            result.rows.forEach((record)=>{\n                const version = record.contract_version || \"original\";\n                groupedData[version].push(record);\n            });\n            res.status(200).json({\n                transactions: result.rows,\n                stats: groupedData,\n                total_count: result.rows[0]?.total_count || 0\n            });\n        } catch (error) {\n            console.error(\"Error fetching gas fee data:\", error);\n            res.status(500).json({\n                error: \"Failed to fetch gas fee data\"\n            });\n        }\n    } else {\n        res.status(405).json({\n            error: \"Method not allowed\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/gas-fee.js\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = (__webpack_exec__("(api)/./pages/api/gas-fee.js"));
module.exports = __webpack_exports__;

})();