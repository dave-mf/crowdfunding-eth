"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./services/gasFeeService.js":
/*!***********************************!*\
  !*** ./services/gasFeeService.js ***!
  \***********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\nclass GasFeeService {\n    // Log gas fee data\n    static async logGasFee(param) {\n        let { campaignId , donatorAddress , donationAmount , gasFee , maxFee , gasPrice , gasLimit , contractVersion , isSuccess , campaignTitle , methodName  } = param;\n        try {\n            const response = await fetch(\"/api/gas-fee\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    campaignId,\n                    donatorAddress,\n                    donationAmount,\n                    gasFee,\n                    maxFee,\n                    gasPrice,\n                    gasLimit,\n                    contractVersion,\n                    isSuccess,\n                    campaignTitle,\n                    methodName\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to log gas fee\");\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"Error logging gas fee:\", error);\n            throw error;\n        }\n    }\n    // Get gas fee data for a specific campaign\n    static async getCampaignGasFees(campaignId) {\n        try {\n            const response = await fetch(\"/api/gas-fee?campaignId=\".concat(campaignId));\n            if (!response.ok) {\n                throw new Error(\"Failed to get campaign gas fees\");\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"Error getting campaign gas fees:\", error);\n            throw error;\n        }\n    }\n    // Get total gas fee for a campaign\n    static async getTotalGasFeeForCampaign(campaignId) {\n        try {\n            const query = \"\\n                SELECT SUM(gas_fee) as total_gas_fee\\n                FROM gas_fee_logs\\n                WHERE campaign_id = $1;\\n            \";\n            const result = await pool.query(query, [\n                campaignId\n            ]);\n            return result.rows[0].total_gas_fee || 0;\n        } catch (error) {\n            console.error(\"Error getting total gas fee:\", error);\n            throw error;\n        }\n    }\n    // Get gas fee statistics with filters\n    static async getGasFeeStats() {\n        let filters = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};\n        try {\n            const queryParams = new URLSearchParams();\n            if (filters.campaignId) queryParams.append(\"campaignId\", filters.campaignId);\n            if (filters.timeRange) queryParams.append(\"timeRange\", filters.timeRange);\n            if (filters.contractVersion) queryParams.append(\"contractVersion\", filters.contractVersion);\n            const response = await fetch(\"/api/gas-fee?\".concat(queryParams.toString()));\n            if (!response.ok) {\n                throw new Error(\"Failed to get gas fee stats\");\n            }\n            return await response.json();\n        } catch (error) {\n            console.error(\"Error getting gas fee stats:\", error);\n            throw error;\n        }\n    }\n}\n/* harmony default export */ __webpack_exports__[\"default\"] = (GasFeeService);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zZXJ2aWNlcy9nYXNGZWVTZXJ2aWNlLmpzLmpzIiwibWFwcGluZ3MiOiI7QUFBQSxNQUFNQTtJQUNGLG1CQUFtQjtJQUNuQixhQUFhQyxVQUFVLEtBWXRCLEVBQUU7WUFab0IsRUFDbkJDLFdBQVUsRUFDVkMsZUFBYyxFQUNkQyxlQUFjLEVBQ2RDLE9BQU0sRUFDTkMsT0FBTSxFQUNOQyxTQUFRLEVBQ1JDLFNBQVEsRUFDUkMsZ0JBQWUsRUFDZkMsVUFBUyxFQUNUQyxjQUFhLEVBQ2JDLFdBQVUsRUFDYixHQVpzQjtRQWFuQixJQUFJO1lBQ0EsTUFBTUMsV0FBVyxNQUFNQyxNQUFNLGdCQUFnQjtnQkFDekNDLFFBQVE7Z0JBQ1JDLFNBQVM7b0JBQ0wsZ0JBQWdCO2dCQUNwQjtnQkFDQUMsTUFBTUMsS0FBS0MsU0FBUyxDQUFDO29CQUNqQmpCO29CQUNBQztvQkFDQUM7b0JBQ0FDO29CQUNBQztvQkFDQUM7b0JBQ0FDO29CQUNBQztvQkFDQUM7b0JBQ0FDO29CQUNBQztnQkFDSjtZQUNKO1lBRUEsSUFBSSxDQUFDQyxTQUFTTyxFQUFFLEVBQUU7Z0JBQ2QsTUFBTSxJQUFJQyxNQUFNLHlCQUF5QjtZQUM3QyxDQUFDO1lBRUQsT0FBTyxNQUFNUixTQUFTUyxJQUFJO1FBQzlCLEVBQUUsT0FBT0MsT0FBTztZQUNaQyxRQUFRRCxLQUFLLENBQUMsMEJBQTBCQTtZQUN4QyxNQUFNQSxNQUFNO1FBQ2hCO0lBQ0o7SUFFQSwyQ0FBMkM7SUFDM0MsYUFBYUUsbUJBQW1CdkIsVUFBVSxFQUFFO1FBQ3hDLElBQUk7WUFDQSxNQUFNVyxXQUFXLE1BQU1DLE1BQU0sMkJBQXNDLE9BQVhaO1lBQ3hELElBQUksQ0FBQ1csU0FBU08sRUFBRSxFQUFFO2dCQUNkLE1BQU0sSUFBSUMsTUFBTSxtQ0FBbUM7WUFDdkQsQ0FBQztZQUNELE9BQU8sTUFBTVIsU0FBU1MsSUFBSTtRQUM5QixFQUFFLE9BQU9DLE9BQU87WUFDWkMsUUFBUUQsS0FBSyxDQUFDLG9DQUFvQ0E7WUFDbEQsTUFBTUEsTUFBTTtRQUNoQjtJQUNKO0lBRUEsbUNBQW1DO0lBQ25DLGFBQWFHLDBCQUEwQnhCLFVBQVUsRUFBRTtRQUMvQyxJQUFJO1lBQ0EsTUFBTXlCLFFBQVM7WUFLZixNQUFNQyxTQUFTLE1BQU1DLEtBQUtGLEtBQUssQ0FBQ0EsT0FBTztnQkFBQ3pCO2FBQVc7WUFDbkQsT0FBTzBCLE9BQU9FLElBQUksQ0FBQyxFQUFFLENBQUNDLGFBQWEsSUFBSTtRQUMzQyxFQUFFLE9BQU9SLE9BQU87WUFDWkMsUUFBUUQsS0FBSyxDQUFDLGdDQUFnQ0E7WUFDOUMsTUFBTUEsTUFBTTtRQUNoQjtJQUNKO0lBRUEsc0NBQXNDO0lBQ3RDLGFBQWFTLGlCQUE2QjtZQUFkQyxVQUFBQSxpRUFBVSxDQUFDLENBQUM7UUFDcEMsSUFBSTtZQUNBLE1BQU1DLGNBQWMsSUFBSUM7WUFDeEIsSUFBSUYsUUFBUS9CLFVBQVUsRUFBRWdDLFlBQVlFLE1BQU0sQ0FBQyxjQUFjSCxRQUFRL0IsVUFBVTtZQUMzRSxJQUFJK0IsUUFBUUksU0FBUyxFQUFFSCxZQUFZRSxNQUFNLENBQUMsYUFBYUgsUUFBUUksU0FBUztZQUN4RSxJQUFJSixRQUFReEIsZUFBZSxFQUFFeUIsWUFBWUUsTUFBTSxDQUFDLG1CQUFtQkgsUUFBUXhCLGVBQWU7WUFFMUYsTUFBTUksV0FBVyxNQUFNQyxNQUFNLGdCQUF1QyxPQUF2Qm9CLFlBQVlJLFFBQVE7WUFDakUsSUFBSSxDQUFDekIsU0FBU08sRUFBRSxFQUFFO2dCQUNkLE1BQU0sSUFBSUMsTUFBTSwrQkFBK0I7WUFDbkQsQ0FBQztZQUNELE9BQU8sTUFBTVIsU0FBU1MsSUFBSTtRQUM5QixFQUFFLE9BQU9DLE9BQU87WUFDWkMsUUFBUUQsS0FBSyxDQUFDLGdDQUFnQ0E7WUFDOUMsTUFBTUEsTUFBTTtRQUNoQjtJQUNKO0FBQ0o7QUFFQSwrREFBZXZCLGFBQWFBLEVBQUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9fTl9FLy4vc2VydmljZXMvZ2FzRmVlU2VydmljZS5qcz8zMGMxIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIEdhc0ZlZVNlcnZpY2Uge1xuICAgIC8vIExvZyBnYXMgZmVlIGRhdGFcbiAgICBzdGF0aWMgYXN5bmMgbG9nR2FzRmVlKHtcbiAgICAgICAgY2FtcGFpZ25JZCxcbiAgICAgICAgZG9uYXRvckFkZHJlc3MsXG4gICAgICAgIGRvbmF0aW9uQW1vdW50LFxuICAgICAgICBnYXNGZWUsXG4gICAgICAgIG1heEZlZSxcbiAgICAgICAgZ2FzUHJpY2UsXG4gICAgICAgIGdhc0xpbWl0LFxuICAgICAgICBjb250cmFjdFZlcnNpb24sXG4gICAgICAgIGlzU3VjY2VzcyxcbiAgICAgICAgY2FtcGFpZ25UaXRsZSxcbiAgICAgICAgbWV0aG9kTmFtZVxuICAgIH0pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9hcGkvZ2FzLWZlZScsIHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICAgICAgICAgIGNhbXBhaWduSWQsXG4gICAgICAgICAgICAgICAgICAgIGRvbmF0b3JBZGRyZXNzLFxuICAgICAgICAgICAgICAgICAgICBkb25hdGlvbkFtb3VudCxcbiAgICAgICAgICAgICAgICAgICAgZ2FzRmVlLFxuICAgICAgICAgICAgICAgICAgICBtYXhGZWUsXG4gICAgICAgICAgICAgICAgICAgIGdhc1ByaWNlLFxuICAgICAgICAgICAgICAgICAgICBnYXNMaW1pdCxcbiAgICAgICAgICAgICAgICAgICAgY29udHJhY3RWZXJzaW9uLFxuICAgICAgICAgICAgICAgICAgICBpc1N1Y2Nlc3MsXG4gICAgICAgICAgICAgICAgICAgIGNhbXBhaWduVGl0bGUsXG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZE5hbWVcbiAgICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gbG9nIGdhcyBmZWUnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGxvZ2dpbmcgZ2FzIGZlZTonLCBlcnJvcik7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEdldCBnYXMgZmVlIGRhdGEgZm9yIGEgc3BlY2lmaWMgY2FtcGFpZ25cbiAgICBzdGF0aWMgYXN5bmMgZ2V0Q2FtcGFpZ25HYXNGZWVzKGNhbXBhaWduSWQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYC9hcGkvZ2FzLWZlZT9jYW1wYWlnbklkPSR7Y2FtcGFpZ25JZH1gKTtcbiAgICAgICAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBnZXQgY2FtcGFpZ24gZ2FzIGZlZXMnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nIGNhbXBhaWduIGdhcyBmZWVzOicsIGVycm9yKTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gR2V0IHRvdGFsIGdhcyBmZWUgZm9yIGEgY2FtcGFpZ25cbiAgICBzdGF0aWMgYXN5bmMgZ2V0VG90YWxHYXNGZWVGb3JDYW1wYWlnbihjYW1wYWlnbklkKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBxdWVyeSA9IGBcbiAgICAgICAgICAgICAgICBTRUxFQ1QgU1VNKGdhc19mZWUpIGFzIHRvdGFsX2dhc19mZWVcbiAgICAgICAgICAgICAgICBGUk9NIGdhc19mZWVfbG9nc1xuICAgICAgICAgICAgICAgIFdIRVJFIGNhbXBhaWduX2lkID0gJDE7XG4gICAgICAgICAgICBgO1xuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcG9vbC5xdWVyeShxdWVyeSwgW2NhbXBhaWduSWRdKTtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQucm93c1swXS50b3RhbF9nYXNfZmVlIHx8IDA7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBnZXR0aW5nIHRvdGFsIGdhcyBmZWU6JywgZXJyb3IpO1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBHZXQgZ2FzIGZlZSBzdGF0aXN0aWNzIHdpdGggZmlsdGVyc1xuICAgIHN0YXRpYyBhc3luYyBnZXRHYXNGZWVTdGF0cyhmaWx0ZXJzID0ge30pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5UGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgICAgICAgICAgaWYgKGZpbHRlcnMuY2FtcGFpZ25JZCkgcXVlcnlQYXJhbXMuYXBwZW5kKCdjYW1wYWlnbklkJywgZmlsdGVycy5jYW1wYWlnbklkKTtcbiAgICAgICAgICAgIGlmIChmaWx0ZXJzLnRpbWVSYW5nZSkgcXVlcnlQYXJhbXMuYXBwZW5kKCd0aW1lUmFuZ2UnLCBmaWx0ZXJzLnRpbWVSYW5nZSk7XG4gICAgICAgICAgICBpZiAoZmlsdGVycy5jb250cmFjdFZlcnNpb24pIHF1ZXJ5UGFyYW1zLmFwcGVuZCgnY29udHJhY3RWZXJzaW9uJywgZmlsdGVycy5jb250cmFjdFZlcnNpb24pO1xuXG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAvYXBpL2dhcy1mZWU/JHtxdWVyeVBhcmFtcy50b1N0cmluZygpfWApO1xuICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGdldCBnYXMgZmVlIHN0YXRzJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZ2V0dGluZyBnYXMgZmVlIHN0YXRzOicsIGVycm9yKTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBHYXNGZWVTZXJ2aWNlOyAiXSwibmFtZXMiOlsiR2FzRmVlU2VydmljZSIsImxvZ0dhc0ZlZSIsImNhbXBhaWduSWQiLCJkb25hdG9yQWRkcmVzcyIsImRvbmF0aW9uQW1vdW50IiwiZ2FzRmVlIiwibWF4RmVlIiwiZ2FzUHJpY2UiLCJnYXNMaW1pdCIsImNvbnRyYWN0VmVyc2lvbiIsImlzU3VjY2VzcyIsImNhbXBhaWduVGl0bGUiLCJtZXRob2ROYW1lIiwicmVzcG9uc2UiLCJmZXRjaCIsIm1ldGhvZCIsImhlYWRlcnMiLCJib2R5IiwiSlNPTiIsInN0cmluZ2lmeSIsIm9rIiwiRXJyb3IiLCJqc29uIiwiZXJyb3IiLCJjb25zb2xlIiwiZ2V0Q2FtcGFpZ25HYXNGZWVzIiwiZ2V0VG90YWxHYXNGZWVGb3JDYW1wYWlnbiIsInF1ZXJ5IiwicmVzdWx0IiwicG9vbCIsInJvd3MiLCJ0b3RhbF9nYXNfZmVlIiwiZ2V0R2FzRmVlU3RhdHMiLCJmaWx0ZXJzIiwicXVlcnlQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJhcHBlbmQiLCJ0aW1lUmFuZ2UiLCJ0b1N0cmluZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./services/gasFeeService.js\n"));

/***/ })

});