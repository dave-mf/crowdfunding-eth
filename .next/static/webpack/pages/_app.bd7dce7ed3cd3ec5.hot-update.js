"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./Context/MultiContractContext.js":
/*!*****************************************!*\
  !*** ./Context/MultiContractContext.js ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MultiContractContext\": function() { return /* binding */ MultiContractContext; },\n/* harmony export */   \"MultiContractProvider\": function() { return /* binding */ MultiContractProvider; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var web3modal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! web3modal */ \"./node_modules/web3modal/dist/index.js\");\n/* harmony import */ var web3modal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(web3modal__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var _contants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./contants */ \"./Context/contants.js\");\n\nvar _s = $RefreshSig$();\n\n\n\n\n// Create context\nconst MultiContractContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)();\n// Fetch contract function\nconst fetchContract = (address, abi, signerOrProvider)=>new ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.Contract(address, abi, signerOrProvider);\nconst MultiContractProvider = (param)=>{\n    let { children  } = param;\n    _s();\n    const [currentAccount, setCurrentAccount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [activeContract, setActiveContract] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"optimized\"); // Default to optimized\n    const [gasFees, setGasFees] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [titleData, setTitleData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        title: \"Crowdfunding DApp\",\n        description: \"A decentralized crowdfunding platform built on blockchain technology\"\n    });\n    const [campaignsUpdatedFlag, setCampaignsUpdatedFlag] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0); // State untuk menandai update campaign\n    // Fungsi untuk memicu refresh data campaign\n    const triggerCampaignsRefresh = ()=>{\n        setCampaignsUpdatedFlag((prev)=>prev + 1);\n        console.log(\"Campaigns refresh triggered. Flag:\", campaignsUpdatedFlag + 1);\n    };\n    // Get current contract details\n    const getCurrentContract = ()=>{\n        return _contants__WEBPACK_IMPORTED_MODULE_3__.CONTRACTS[activeContract];\n    };\n    // Switch contract function\n    const switchContract = (contractType)=>{\n        setActiveContract(contractType);\n    };\n    // Get ETH price in USD with fallback\n    const getEthPrice = async ()=>{\n        try {\n            const response = await fetch(\"/api/eth-price\");\n            const data = await response.json();\n            const price = data.ethereum.usd;\n            console.log(\"Current ETH price:\", price); // Debug log\n            if (!price || price <= 0) {\n                throw new Error(\"Invalid price from API\");\n            }\n            return price;\n        } catch (error) {\n            console.warn(\"Failed to fetch ETH price, using fallback value:\", error);\n            return 2500; // Updated fallback value in USD\n        }\n    };\n    // Get transaction data from Etherscan\n    const getTransactionFromEtherscan = async (txHash)=>{\n        try {\n            const response = await fetch(\"https://api-sepolia.etherscan.io/api?module=proxy&action=eth_getTransactionByHash&txhash=\".concat(txHash, \"&apikey=YourApiKey\"));\n            const data = await response.json();\n            return data.result;\n        } catch (error) {\n            console.warn(\"Failed to fetch from Etherscan:\", error);\n            return null;\n        }\n    };\n    // Get transaction receipt from Etherscan\n    const getTransactionReceiptFromEtherscan = async (txHash)=>{\n        try {\n            const response = await fetch(\"https://api-sepolia.etherscan.io/api?module=proxy&action=eth_getTransactionReceipt&txhash=\".concat(txHash, \"&apikey=YourApiKey\"));\n            const data = await response.json();\n            return data.result;\n        } catch (error) {\n            console.warn(\"Failed to fetch receipt from Etherscan:\", error);\n            return null;\n        }\n    };\n    // Get gas fee for a transaction\n    const getGasFee = async (transaction)=>{\n        try {\n            const provider = transaction.provider;\n            const feeData = await provider.getFeeData();\n            const gasPrice = feeData.gasPrice || feeData.maxFeePerGas;\n            const gasLimit = await transaction.estimateGas();\n            const gasFee = gasPrice.mul(gasLimit);\n            // Get ETH price in USD\n            const ethPrice = await getEthPrice();\n            console.log(\"ETH price used for conversion:\", ethPrice); // Debug log\n            const gasFeeInEth = ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(gasFee);\n            const gasFeeInUsd = (parseFloat(gasFeeInEth) * ethPrice).toFixed(2);\n            console.log(\"Gas fee calculation:\", {\n                gasFeeInEth,\n                ethPrice,\n                gasFeeInUsd\n            }); // Debug log\n            return {\n                eth: gasFeeInEth,\n                usd: gasFeeInUsd\n            };\n        } catch (error) {\n            console.error(\"Error getting gas fee:\", error);\n            return {\n                eth: \"0\",\n                usd: \"0\"\n            };\n        }\n    };\n    // Store gas fee in localStorage\n    const storeGasFee = (txHash, gasFee)=>{\n        try {\n            const storedFees = JSON.parse(localStorage.getItem(\"gasFees\") || \"{}\");\n            storedFees[txHash] = gasFee;\n            localStorage.setItem(\"gasFees\", JSON.stringify(storedFees));\n            console.log(\"Stored gas fee:\", txHash, gasFee); // Debug log\n        } catch (error) {\n            console.warn(\"Error storing gas fee:\", error);\n        }\n    };\n    // Get stored gas fee\n    const getStoredGasFee = (txHash)=>{\n        try {\n            const storedFees = JSON.parse(localStorage.getItem(\"gasFees\") || \"{}\");\n            const fee = storedFees[txHash];\n            console.log(\"Retrieved gas fee:\", txHash, fee); // Debug log\n            return fee;\n        } catch (error) {\n            console.warn(\"Error getting stored gas fee:\", error);\n            return null;\n        }\n    };\n    // Create campaign with gas tracking\n    const createCampaign = async (campaign)=>{\n        const { title , description , amount , deadline  } = campaign;\n        const web3Modal = new (web3modal__WEBPACK_IMPORTED_MODULE_2___default())();\n        const connection = await web3Modal.connect();\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.providers.Web3Provider(connection);\n        const signer = provider.getSigner();\n        const contract = fetchContract(getCurrentContract().address, getCurrentContract().abi, signer);\n        try {\n            const transaction = await contract.createCampaign(currentAccount, title, description, ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.parseUnits(amount, 18), new Date(deadline).getTime());\n            // Get gas fee before waiting for transaction\n            const gasFee = await getGasFee(transaction);\n            // Update gas fees state\n            setGasFees((prev)=>({\n                    ...prev,\n                    createCampaign: {\n                        ...prev.createCampaign,\n                        [activeContract]: gasFee\n                    }\n                }));\n            await transaction.wait();\n            console.log(\"Contract Call Success\", transaction);\n            triggerCampaignsRefresh(); // <-- Panggil setelah sukses\n            return transaction;\n        } catch (error) {\n            console.log(\"Contract Call Failure!\", error);\n            throw error;\n        }\n    };\n    // Get campaigns\n    const getCampaigns = async ()=>{\n        const web3Modal = new (web3modal__WEBPACK_IMPORTED_MODULE_2___default())();\n        const connection = await web3Modal.connect();\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.providers.Web3Provider(connection);\n        const contract = fetchContract(getCurrentContract().address, getCurrentContract().abi, provider);\n        const campaigns = await contract.getCampaigns();\n        const parsedCampaigns = campaigns.map((campaign, i)=>({\n                owner: campaign.owner,\n                title: campaign.title,\n                description: campaign.description,\n                target: ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(campaign.target.toString()),\n                deadline: campaign.deadline.toNumber(),\n                amountCollected: ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(campaign.amountCollected.toString()),\n                pId: i,\n                contractVersion: activeContract // Ensure contractVersion is always included\n            }));\n        return parsedCampaigns;\n    };\n    // Get user campaigns\n    const getUserCampaigns = async ()=>{\n        const web3Modal = new (web3modal__WEBPACK_IMPORTED_MODULE_2___default())();\n        const connection = await web3Modal.connect();\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.providers.Web3Provider(connection);\n        const contract = fetchContract(getCurrentContract().address, getCurrentContract().abi, provider);\n        const allCampaigns = await contract.getCampaigns();\n        const accounts = await window.ethereum.request({\n            method: \"eth_accounts\"\n        });\n        const currentUser = accounts[0];\n        const filteredCampaigns = allCampaigns.filter((campaign)=>campaign.owner.toLowerCase() === currentUser.toLowerCase());\n        const userData = filteredCampaigns.map((campaign, i)=>({\n                owner: campaign.owner,\n                title: campaign.title,\n                description: campaign.description,\n                target: ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(campaign.target.toString()),\n                deadline: campaign.deadline.toNumber(),\n                amountCollected: ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(campaign.amountCollected.toString()),\n                pId: i,\n                contractVersion: activeContract // Add contract version\n            }));\n        return userData;\n    };\n    // Get donations\n    const getDonations = async (pId)=>{\n        const web3Modal = new (web3modal__WEBPACK_IMPORTED_MODULE_2___default())();\n        const connection = await web3Modal.connect();\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.providers.Web3Provider(connection);\n        const contract = fetchContract(getCurrentContract().address, getCurrentContract().abi, provider);\n        const donations = await contract.getDonators(pId);\n        const numberOfDonations = donations[0].length;\n        const parsedDonations = [];\n        for(let i = 0; i < numberOfDonations; i++){\n            try {\n                const donatorAddress = donations[0][i];\n                const donationAmount = ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(donations[1][i].toString());\n                // Get all events from the contract\n                const filter = contract.filters.Donated(donatorAddress);\n                const events = await contract.queryFilter(filter);\n                console.log(\"Found events for\", donatorAddress, \":\", events); // Debug log\n                let gasFee = {\n                    eth: \"0\",\n                    usd: \"0\"\n                };\n                if (events.length > 0) {\n                    // Get the most recent event for this donation amount\n                    const matchingEvent = events.find((event)=>{\n                        const eventAmount = ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(event.args.amount.toString());\n                        return eventAmount === donationAmount;\n                    });\n                    if (matchingEvent) {\n                        const txHash = matchingEvent.transactionHash;\n                        console.log(\"Found transaction hash:\", txHash); // Debug log\n                        // Try to get stored gas fee first\n                        const storedFee = getStoredGasFee(txHash);\n                        if (storedFee) {\n                            console.log(\"Using stored fee:\", storedFee); // Debug log\n                            gasFee = storedFee;\n                        } else {\n                            console.log(\"No stored fee, getting from transaction\"); // Debug log\n                            // If not stored, get from transaction\n                            const tx = await provider.getTransaction(txHash);\n                            const receipt = await provider.getTransactionReceipt(txHash);\n                            if (tx && receipt) {\n                                console.log(\"Transaction data:\", tx); // Debug log\n                                console.log(\"Receipt data:\", receipt); // Debug log\n                                const gasUsed = receipt.gasUsed;\n                                const gasPrice = receipt.effectiveGasPrice || tx.gasPrice || tx.maxFeePerGas;\n                                const gasFeeInWei = gasUsed.mul(gasPrice);\n                                // Get ETH price in USD\n                                const ethPrice = await getEthPrice();\n                                console.log(\"ETH price for conversion:\", ethPrice); // Debug log\n                                const gasFeeInEth = ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(gasFeeInWei);\n                                const gasFeeInUsd = (parseFloat(gasFeeInEth) * ethPrice).toFixed(2);\n                                console.log(\"Gas fee calculation:\", {\n                                    gasUsed: gasUsed.toString(),\n                                    gasPrice: gasPrice.toString(),\n                                    gasFeeInWei: gasFeeInWei.toString(),\n                                    gasFeeInEth,\n                                    ethPrice,\n                                    gasFeeInUsd\n                                }); // Debug log\n                                gasFee = {\n                                    eth: gasFeeInEth,\n                                    usd: gasFeeInUsd\n                                };\n                                // Store the gas fee for future use\n                                storeGasFee(txHash, gasFee);\n                            }\n                        }\n                    }\n                }\n                // Create donation object\n                const donation = {\n                    donator: donatorAddress,\n                    donation: donationAmount,\n                    gasFee: gasFee\n                };\n                console.log(\"Created donation object:\", donation); // Debug log\n                parsedDonations.push(donation);\n            } catch (error) {\n                console.warn(\"Error getting gas fee for donation:\", error);\n                // If we can't get the actual gas fee, use an estimate\n                const feeData = await provider.getFeeData();\n                const gasPrice = feeData.gasPrice || feeData.maxFeePerGas;\n                const gasLimit = 100000;\n                const gasFeeInWei = gasPrice.mul(gasLimit);\n                const ethPrice = await getEthPrice();\n                const gasFeeInEth = ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(gasFeeInWei);\n                const gasFeeInUsd = (parseFloat(gasFeeInEth) * ethPrice).toFixed(2);\n                parsedDonations.push({\n                    donator: donations[0][i],\n                    donation: ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(donations[1][i].toString()),\n                    gasFee: {\n                        eth: gasFeeInEth,\n                        usd: gasFeeInUsd\n                    }\n                });\n            }\n        }\n        console.log(\"Final parsed donations:\", parsedDonations); // Debug log\n        return parsedDonations;\n    };\n    // Donate with gas tracking\n    const donate = async (pId, amount)=>{\n        const web3Modal = new (web3modal__WEBPACK_IMPORTED_MODULE_2___default())();\n        const connection = await web3Modal.connect();\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.providers.Web3Provider(connection);\n        const signer = provider.getSigner();\n        const contract = fetchContract(getCurrentContract().address, getCurrentContract().abi, signer);\n        try {\n            const transaction = await contract.donateToCampaign(pId, {\n                value: ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.parseEther(amount)\n            });\n            console.log(\"Transaction sent:\", transaction); // Debug log\n            // Wait for transaction to be mined\n            console.log(\"Waiting for transaction to be mined...\");\n            const receipt = await transaction.wait();\n            console.log(\"Transaction receipt:\", receipt); // Debug log\n            // Calculate gas fee from receipt\n            const gasUsed = receipt.gasUsed;\n            const gasPrice = transaction.gasPrice || transaction.maxFeePerGas;\n            const gasFeeInWei = gasUsed.mul(gasPrice);\n            // Get ETH price in USD\n            const ethPrice = await getEthPrice();\n            const gasFeeInEth = ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(gasFeeInWei);\n            const gasFeeInUsd = (parseFloat(gasFeeInEth) * ethPrice).toFixed(2);\n            const gasFee = {\n                eth: gasFeeInEth,\n                usd: gasFeeInUsd\n            };\n            console.log(\"Calculated gas fee:\", gasFee); // Debug log\n            // Store gas fee in localStorage\n            storeGasFee(transaction.hash, gasFee);\n            // Update gas fees state\n            setGasFees((prev)=>({\n                    ...prev,\n                    donate: {\n                        ...prev.donate,\n                        [activeContract]: gasFee\n                    }\n                }));\n            triggerCampaignsRefresh();\n            return transaction;\n        } catch (error) {\n            console.log(\"Contract Call Failure!\", error);\n            throw error;\n        }\n    };\n    // Batch donate with gas tracking\n    const batchDonate = async (ids, amounts)=>{\n        const web3Modal = new (web3modal__WEBPACK_IMPORTED_MODULE_2___default())();\n        const connection = await web3Modal.connect();\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.providers.Web3Provider(connection);\n        const signer = provider.getSigner();\n        const contract = fetchContract(getCurrentContract().address, getCurrentContract().abi, signer);\n        try {\n            // Calculate total value and format amounts properly\n            const totalValue = amounts.reduce((sum, amount)=>sum.add(ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.parseEther(amount.toString())), ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.BigNumber.from(0));\n            // Format amounts for the contract call\n            const formattedAmounts = amounts.map((amount)=>ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.parseEther(amount.toString()).toString());\n            console.log(\"Campaign IDs:\", ids); // Debug log\n            console.log(\"Sending amounts:\", formattedAmounts); // Debug log\n            console.log(\"Total value:\", ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(totalValue)); // Debug log\n            let transaction;\n            let methodName;\n            // If only one campaign is selected, use regular donate function\n            if (ids.length === 1) {\n                console.log(\"Using single donation function\");\n                methodName = \"donateToCampaign\";\n                transaction = await contract.donateToCampaign(ids[0], {\n                    value: totalValue\n                });\n            } else {\n                // Use batch donation for multiple campaigns\n                console.log(\"Using batch donation function\");\n                methodName = activeContract === \"batch-processing\" ? \"donateBatch\" : \"batchDonate\";\n                transaction = await contract[methodName](ids, formattedAmounts, {\n                    value: totalValue\n                });\n            }\n            // Get gas fee before waiting for transaction\n            const gasFee = await getGasFee(transaction);\n            // Update gas fees state\n            setGasFees((prev)=>({\n                    ...prev,\n                    batchDonate: {\n                        ...prev.batchDonate,\n                        [activeContract]: gasFee\n                    }\n                }));\n            // Wait for transaction to be mined\n            const receipt = await transaction.wait();\n            // Log transaction for each campaign\n            for(let i = 0; i < ids.length; i++){\n                await createDonation(transaction.hash, ids[i], amounts[i], methodName);\n            }\n            triggerCampaignsRefresh();\n            return transaction;\n        } catch (error) {\n            console.log(\"Contract Call Failure!\", error);\n            throw error;\n        }\n    };\n    // Check if wallet is connected\n    const checkIfWalletConnected = async ()=>{\n        try {\n            if (!window.ethereum) return console.log(\"Install MetaMask\");\n            const accounts = await window.ethereum.request({\n                method: \"eth_accounts\"\n            });\n            if (accounts.length) {\n                setCurrentAccount(accounts[0]);\n            } else {\n                console.log(\"No Account Found\");\n            }\n        } catch (error) {\n            console.log(\"Something wrong while connecting to wallet!\");\n        }\n    };\n    // Connect wallet\n    const connectWallet = async ()=>{\n        try {\n            if (!window.ethereum) return console.log(\"Install Metamask!\");\n            const accounts = await window.ethereum.request({\n                method: \"eth_requestAccounts\"\n            });\n            setCurrentAccount(accounts[0]);\n        } catch (error) {\n            console.log(\"Error while connecting to wallet!\");\n        }\n    };\n    // Disconnect wallet\n    const disconnectWallet = async ()=>{\n        try {\n            const web3Modal = new (web3modal__WEBPACK_IMPORTED_MODULE_2___default())();\n            // Clear the cached provider\n            if (web3Modal.cachedProvider) {\n                await web3Modal.clearCachedProvider();\n            }\n            // Clear the current account\n            setCurrentAccount(\"\");\n            // Clear any stored wallet data in localStorage\n            localStorage.removeItem(\"WEB3_CONNECT_CACHED_PROVIDER\");\n            // Request MetaMask to disconnect\n            if (window.ethereum) {\n                await window.ethereum.request({\n                    method: \"wallet_requestPermissions\",\n                    params: [\n                        {\n                            eth_accounts: {}\n                        }\n                    ]\n                });\n            }\n            // Force reload the page to clear any remaining state\n            window.location.reload();\n        } catch (error) {\n            console.log(\"Error while disconnecting wallet!\", error);\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        checkIfWalletConnected();\n        // Add event listeners for MetaMask\n        if (window.ethereum) {\n            // Listen for account changes\n            window.ethereum.on(\"accountsChanged\", (accounts)=>{\n                if (accounts.length === 0) {\n                    // User disconnected their wallet\n                    setCurrentAccount(\"\");\n                    localStorage.removeItem(\"WEB3_CONNECT_CACHED_PROVIDER\");\n                } else {\n                    // User switched accounts\n                    setCurrentAccount(accounts[0]);\n                }\n            });\n            // Listen for chain changes\n            window.ethereum.on(\"chainChanged\", ()=>{\n                window.location.reload();\n            });\n            // Listen for disconnect\n            window.ethereum.on(\"disconnect\", ()=>{\n                setCurrentAccount(\"\");\n                localStorage.removeItem(\"WEB3_CONNECT_CACHED_PROVIDER\");\n            });\n        }\n        // Cleanup function\n        return ()=>{\n            if (window.ethereum) {\n                window.ethereum.removeAllListeners(\"accountsChanged\");\n                window.ethereum.removeAllListeners(\"chainChanged\");\n                window.ethereum.removeAllListeners(\"disconnect\");\n            }\n        };\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(MultiContractContext.Provider, {\n        value: {\n            currentAccount,\n            activeContract,\n            gasFees,\n            titleData,\n            switchContract,\n            createCampaign,\n            getCampaigns,\n            getUserCampaigns,\n            donate,\n            batchDonate,\n            getDonations,\n            connectWallet,\n            disconnectWallet,\n            getCurrentContract,\n            campaignsUpdatedFlag,\n            getEthPrice\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/davemf/Coding/crowdfunding/Context/MultiContractContext.js\",\n        lineNumber: 613,\n        columnNumber: 9\n    }, undefined);\n};\n_s(MultiContractProvider, \"xl5Iu0SKZP6U08BOobouLIDhzb4=\");\n_c = MultiContractProvider;\nvar _c;\n$RefreshReg$(_c, \"MultiContractProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Context/MultiContractContext.js\n"));

/***/ })

});