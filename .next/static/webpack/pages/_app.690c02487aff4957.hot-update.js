"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./Components/PupUp.jsx":
/*!******************************!*\
  !*** ./Components/PupUp.jsx ***!
  \******************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var _services_gasFeeService__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../services/gasFeeService */ \"./services/gasFeeService.js\");\n/* harmony import */ var _utils_ethPrice__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/ethPrice */ \"./utils/ethPrice.js\");\n\nvar _s = $RefreshSig$();\n\n\n\n\nconst PupUp = (param)=>{\n    let { setOpenModel , donate , donateFunction , getDonations , getCampaigns , getCurrentContract , getEthPrice  } = param;\n    _s();\n    const [amount, setAmount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [allDonationData, setAllDonationData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [estimatedGas, setEstimatedGas] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [ethPrice, setEthPrice] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [gasDetails, setGasDetails] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [maxFee, setMaxFee] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [activeContract, setActiveContract] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Fetch ETH price\n    const fetchEthPrice = async ()=>{\n        try {\n            const price = await getEthPrice();\n            setEthPrice(price);\n        } catch (error) {\n            console.error(\"Error fetching ETH price:\", error);\n            setEthPrice(2500); // Fallback price\n        }\n    };\n    // Get gas details from MetaMask\n    const getGasDetails = async ()=>{\n        try {\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.providers.Web3Provider(window.ethereum);\n            const gasPrice = await provider.getGasPrice();\n            const gasPriceInEth = ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(gasPrice);\n            if (ethPrice) {\n                const gasPriceInUsd = (parseFloat(gasPriceInEth) * ethPrice).toFixed(2);\n                setGasDetails({\n                    eth: gasPriceInEth,\n                    usd: \"$\".concat(gasPriceInUsd)\n                });\n            }\n        } catch (error) {\n            console.error(\"Error getting gas details:\", error);\n        }\n    };\n    // Update gas details when ETH price changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        getGasDetails();\n    }, [\n        ethPrice\n    ]);\n    // Fetch ETH price on component mount and every 5 minutes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        fetchEthPrice();\n        const interval = setInterval(fetchEthPrice, 5 * 60 * 1000);\n        return ()=>clearInterval(interval);\n    }, []);\n    const estimateGas = async ()=>{\n        if (!amount || isNaN(amount) || parseFloat(amount) <= 0) {\n            setEstimatedGas(null);\n            return;\n        }\n        try {\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.providers.Web3Provider(window.ethereum);\n            const contract = await donateFunction.getContract();\n            // Estimate gas\n            const gasEstimate = await contract.estimateGas.donate(donate.pId, ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.parseEther(amount));\n            // Get current gas price from MetaMask\n            const gasPrice = await provider.getGasPrice();\n            // Calculate total gas cost\n            const gasCostInWei = gasEstimate.mul(gasPrice);\n            const gasCostInEth = ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(gasCostInWei);\n            if (ethPrice) {\n                const gasCostInUsd = (parseFloat(gasCostInEth) * ethPrice).toFixed(2);\n                setEstimatedGas({\n                    eth: gasCostInEth,\n                    usd: \"$\".concat(gasCostInUsd)\n                });\n            }\n        } catch (error) {\n            console.error(\"Error estimating gas:\", error);\n            setEstimatedGas(null);\n        }\n    };\n    // Update gas estimate when amount or gas details change\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        estimateGas();\n    }, [\n        amount,\n        gasDetails,\n        ethPrice\n    ]);\n    // Fetch donation history from database\n    const fetchDonationHistory = async ()=>{\n        try {\n            if (!donate || !donate.contractVersion) {\n                setAllDonationData([]);\n                return;\n            }\n            // Get transactions from database filtered by campaign ID and contract version\n            const response = await fetch(\"/api/gas-fee?campaignId=\".concat(donate.pId, \"&contractVersion=\").concat(donate.contractVersion));\n            const result = await response.json();\n            // Check if result has transactions array\n            if (!result || !result.transactions || !Array.isArray(result.transactions)) {\n                console.log(\"No transactions found or invalid format:\", result);\n                setAllDonationData([]);\n                return;\n            }\n            // Format the data for display\n            const formattedDonations = result.transactions.map((tx)=>{\n                // Convert gas fee to USD if we have ETH price\n                let gasFeeUsd = \"0\";\n                if (ethPrice && tx.gas_fee) {\n                    try {\n                        const gasFeeInEth = ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(tx.gas_fee);\n                        gasFeeUsd = (parseFloat(gasFeeInEth) * ethPrice).toFixed(2);\n                    } catch (error) {\n                        console.error(\"Error converting gas fee to USD:\", error);\n                    }\n                }\n                return {\n                    donator: tx.donator_address,\n                    amount: tx.donation_amount,\n                    gasFee: {\n                        eth: tx.gas_fee,\n                        usd: \"$\".concat(gasFeeUsd)\n                    },\n                    timestamp: tx.timestamp\n                };\n            });\n            setAllDonationData(formattedDonations);\n        } catch (error) {\n            console.error(\"Error fetching donation history:\", error);\n            setAllDonationData([]);\n        }\n    };\n    // Update donation history when ETH price changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (donate) {\n            fetchDonationHistory();\n        }\n    }, [\n        ethPrice,\n        donate\n    ]);\n    // Clear donations when modal is closed\n    const handleCloseModal = ()=>{\n        setAllDonationData([]);\n        setOpenModel(false);\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        if (donate) {\n            fetchDonationHistory();\n        } else {\n            setAllDonationData([]);\n        }\n    }, [\n        donate\n    ]);\n    const createDonation = async ()=>{\n        try {\n            setIsLoading(true);\n            const transaction = await donateFunction(donate.pId, amount);\n            // Wait for transaction to be mined\n            const receipt = await transaction.wait();\n            // Log transaction\n            await logTransaction(transaction.hash, donate.pId, amount, \"donateToCampaign\");\n            setOpenModel(false);\n        } catch (error) {\n            console.error(\"Donation error:\", error);\n        } finally{\n            setIsLoading(false);\n        }\n    };\n    // Rename the logging function to avoid confusion\n    const logTransaction = async (txHash, campaignId, amount, method)=>{\n        try {\n            // Get transaction data from MetaMask\n            const provider = new ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.providers.Web3Provider(window.ethereum);\n            const tx = await provider.getTransaction(txHash);\n            const receipt = await provider.getTransactionReceipt(txHash);\n            // Get method name from transaction data\n            let methodName = method;\n            if (!methodName && tx.data) {\n                // Decode transaction data to get method name\n                const iface = new ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.Interface(getCurrentContract().abi);\n                try {\n                    const decodedData = iface.parseTransaction({\n                        data: tx.data\n                    });\n                    methodName = decodedData.name;\n                } catch (error) {\n                    console.error(\"Error decoding transaction data:\", error);\n                    methodName = \"unknown\";\n                }\n            }\n            // Map method names to standardized format\n            const methodMap = {\n                \"donateToCampaign\": \"Single Donation\",\n                \"batchDonate\": \"Batch Donation\",\n                \"donateBatch\": \"Batch Donation\",\n                \"unknown\": \"Unknown Method\"\n            };\n            const standardizedMethod = methodMap[methodName] || methodName;\n            // Get campaign title\n            const campaigns = await getCampaigns();\n            const campaign = campaigns.find((c)=>c.pId === campaignId);\n            const campaignTitle = campaign ? campaign.title : \"Unknown Campaign\";\n            // Calculate gas fee\n            const gasUsed = receipt.gasUsed;\n            const gasPrice = receipt.effectiveGasPrice || tx.gasPrice;\n            const gasFeeInWei = gasUsed.mul(gasPrice);\n            const gasFeeInEth = ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(gasFeeInWei);\n            // Get ETH price in USD\n            const currentEthPrice = await getEthPrice();\n            const gasFeeInUsd = (parseFloat(gasFeeInEth) * currentEthPrice).toFixed(2);\n            const response = await fetch(\"/api/gas-fee\", {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({\n                    tx_hash: txHash,\n                    campaign_id: campaignId,\n                    amount: amount,\n                    gas_fee: gasFeeInEth,\n                    gas_fee_usd: gasFeeInUsd,\n                    method_name: standardizedMethod,\n                    campaign_title: campaignTitle,\n                    contract_version: activeContract\n                })\n            });\n            if (!response.ok) {\n                throw new Error(\"Failed to log transaction\");\n            }\n            console.log(\"Transaction logged successfully\");\n            // Refresh donation history after successful logging\n            await fetchDonationHistory();\n        } catch (error) {\n            console.error(\"Error logging transaction:\", error);\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.Fragment, {\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"fixed inset-0 z-40 bg-black bg-opacity-40\"\n            }, void 0, false, {\n                fileName: \"/Users/davemf/Coding/crowdfunding/Components/PupUp.jsx\",\n                lineNumber: 271,\n                columnNumber: 7\n            }, undefined),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"fixed inset-0 z-50 flex items-center justify-center p-4\",\n                children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                    className: \"bg-white rounded-2xl shadow-xl w-full max-w-lg p-6 relative\",\n                    children: [\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                            onClick: handleCloseModal,\n                            className: \"absolute top-3 right-3 text-gray-400 hover:text-gray-600 text-xl font-bold\",\n                            children: \"\\xd7\"\n                        }, void 0, false, {\n                            fileName: \"/Users/davemf/Coding/crowdfunding/Components/PupUp.jsx\",\n                            lineNumber: 277,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h2\", {\n                            className: \"text-2xl font-semibold text-gray-800 mb-2\",\n                            children: donate.title\n                        }, void 0, false, {\n                            fileName: \"/Users/davemf/Coding/crowdfunding/Components/PupUp.jsx\",\n                            lineNumber: 285,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                            className: \"text-sm text-gray-500 mb-4\",\n                            children: donate.description\n                        }, void 0, false, {\n                            fileName: \"/Users/davemf/Coding/crowdfunding/Components/PupUp.jsx\",\n                            lineNumber: 288,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"mb-4\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                                    onChange: (e)=>setAmount(e.target.value),\n                                    placeholder: \"Enter Amount to Donate (ETH)\",\n                                    type: \"number\",\n                                    className: \"w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-indigo-500\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/davemf/Coding/crowdfunding/Components/PupUp.jsx\",\n                                    lineNumber: 292,\n                                    columnNumber: 13\n                                }, undefined),\n                                maxFee && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                    className: \"mt-2 p-2 bg-blue-50 rounded-md\",\n                                    children: [\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            className: \"flex items-center justify-between mb-2\",\n                                            children: [\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                                    className: \"text-sm font-medium text-blue-800\",\n                                                    children: \"Network Fee\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/davemf/Coding/crowdfunding/Components/PupUp.jsx\",\n                                                    lineNumber: 303,\n                                                    columnNumber: 19\n                                                }, undefined),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                    className: \"text-xs text-green-600 animate-pulse\",\n                                                    children: \"● Live\"\n                                                }, void 0, false, {\n                                                    fileName: \"/Users/davemf/Coding/crowdfunding/Components/PupUp.jsx\",\n                                                    lineNumber: 304,\n                                                    columnNumber: 19\n                                                }, undefined)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/davemf/Coding/crowdfunding/Components/PupUp.jsx\",\n                                            lineNumber: 302,\n                                            columnNumber: 17\n                                        }, undefined),\n                                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"p\", {\n                                            className: \"text-sm text-blue-600\",\n                                            children: [\n                                                maxFee.eth,\n                                                \" ETH \",\n                                                maxFee.usd && \"(\".concat(maxFee.usd, \")\")\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/davemf/Coding/crowdfunding/Components/PupUp.jsx\",\n                                            lineNumber: 306,\n                                            columnNumber: 17\n                                        }, undefined)\n                                    ]\n                                }, void 0, true, {\n                                    fileName: \"/Users/davemf/Coding/crowdfunding/Components/PupUp.jsx\",\n                                    lineNumber: 301,\n                                    columnNumber: 15\n                                }, undefined)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/davemf/Coding/crowdfunding/Components/PupUp.jsx\",\n                            lineNumber: 291,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"max-h-40 overflow-y-auto space-y-2\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"h3\", {\n                                    className: \"text-sm font-medium text-gray-700 mb-2\",\n                                    children: \"Transaction History\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/davemf/Coding/crowdfunding/Components/PupUp.jsx\",\n                                    lineNumber: 315,\n                                    columnNumber: 13\n                                }, undefined),\n                                allDonationData === null || allDonationData === void 0 ? void 0 : allDonationData.map((donation, i)=>{\n                                    var _donation_donator, _donation_donator1;\n                                    /*#__PURE__*/ return (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                        className: \"text-sm text-gray-600 border-b pb-1\",\n                                        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                            children: [\n                                                i + 1,\n                                                \". \",\n                                                donation.amount,\n                                                \" ETH -\",\n                                                \" \",\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                                                    className: \"text-gray-400\",\n                                                    children: [\n                                                        (_donation_donator = donation.donator) === null || _donation_donator === void 0 ? void 0 : _donation_donator.slice(0, 8),\n                                                        \"...\",\n                                                        (_donation_donator1 = donation.donator) === null || _donation_donator1 === void 0 ? void 0 : _donation_donator1.slice(-6)\n                                                    ]\n                                                }, void 0, true, {\n                                                    fileName: \"/Users/davemf/Coding/crowdfunding/Components/PupUp.jsx\",\n                                                    lineNumber: 323,\n                                                    columnNumber: 19\n                                                }, undefined),\n                                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                                                    className: \"text-xs text-gray-500\",\n                                                    children: [\n                                                        \"Gas: \",\n                                                        donation.gasFee.eth,\n                                                        \" ETH (\",\n                                                        donation.gasFee.usd,\n                                                        \")\"\n                                                    ]\n                                                }, void 0, true, {\n                                                    fileName: \"/Users/davemf/Coding/crowdfunding/Components/PupUp.jsx\",\n                                                    lineNumber: 327,\n                                                    columnNumber: 19\n                                                }, undefined)\n                                            ]\n                                        }, void 0, true, {\n                                            fileName: \"/Users/davemf/Coding/crowdfunding/Components/PupUp.jsx\",\n                                            lineNumber: 321,\n                                            columnNumber: 17\n                                        }, undefined)\n                                    }, i, false, {\n                                        fileName: \"/Users/davemf/Coding/crowdfunding/Components/PupUp.jsx\",\n                                        lineNumber: 317,\n                                        columnNumber: 15\n                                    }, undefined);\n                                })\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/davemf/Coding/crowdfunding/Components/PupUp.jsx\",\n                            lineNumber: 314,\n                            columnNumber: 11\n                        }, undefined),\n                        /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                            className: \"flex justify-end mt-6 gap-3\",\n                            children: [\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                    onClick: handleCloseModal,\n                                    className: \"px-4 py-2 rounded-md text-gray-700 bg-gray-100 hover:bg-gray-200\",\n                                    disabled: isLoading,\n                                    children: \"Cancel\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/davemf/Coding/crowdfunding/Components/PupUp.jsx\",\n                                    lineNumber: 337,\n                                    columnNumber: 13\n                                }, undefined),\n                                /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                                    onClick: createDonation,\n                                    disabled: isLoading || !amount || isNaN(amount) || parseFloat(amount) <= 0,\n                                    className: \"px-4 py-2 rounded-md text-white \".concat(isLoading || !amount || isNaN(amount) || parseFloat(amount) <= 0 ? \"bg-indigo-400 cursor-not-allowed\" : \"bg-indigo-600 hover:bg-indigo-700\"),\n                                    children: isLoading ? \"Processing...\" : \"Donate Now\"\n                                }, void 0, false, {\n                                    fileName: \"/Users/davemf/Coding/crowdfunding/Components/PupUp.jsx\",\n                                    lineNumber: 344,\n                                    columnNumber: 13\n                                }, undefined)\n                            ]\n                        }, void 0, true, {\n                            fileName: \"/Users/davemf/Coding/crowdfunding/Components/PupUp.jsx\",\n                            lineNumber: 336,\n                            columnNumber: 11\n                        }, undefined)\n                    ]\n                }, void 0, true, {\n                    fileName: \"/Users/davemf/Coding/crowdfunding/Components/PupUp.jsx\",\n                    lineNumber: 275,\n                    columnNumber: 9\n                }, undefined)\n            }, void 0, false, {\n                fileName: \"/Users/davemf/Coding/crowdfunding/Components/PupUp.jsx\",\n                lineNumber: 274,\n                columnNumber: 7\n            }, undefined)\n        ]\n    }, void 0, true);\n};\n_s(PupUp, \"YNbFoJcUmSDBikMvlkPs2HV4jb4=\");\n_c = PupUp;\n/* harmony default export */ __webpack_exports__[\"default\"] = (PupUp);\nvar _c;\n$RefreshReg$(_c, \"PupUp\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Components/PupUp.jsx\n"));

/***/ }),

/***/ "./Context/MultiContractContext.js":
/*!*****************************************!*\
  !*** ./Context/MultiContractContext.js ***!
  \*****************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"MultiContractContext\": function() { return /* binding */ MultiContractContext; },\n/* harmony export */   \"MultiContractProvider\": function() { return /* binding */ MultiContractProvider; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"./node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var web3modal__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! web3modal */ \"./node_modules/web3modal/dist/index.js\");\n/* harmony import */ var web3modal__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(web3modal__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var ethers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ethers */ \"./node_modules/ethers/lib.esm/index.js\");\n/* harmony import */ var _contants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./contants */ \"./Context/contants.js\");\n\nvar _s = $RefreshSig$();\n\n\n\n\n// Create context\nconst MultiContractContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)();\n// Fetch contract function\nconst fetchContract = (address, abi, signerOrProvider)=>new ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.Contract(address, abi, signerOrProvider);\nconst MultiContractProvider = (param)=>{\n    let { children  } = param;\n    _s();\n    const [currentAccount, setCurrentAccount] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"\");\n    const [activeContract, setActiveContract] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(\"optimized\"); // Default to optimized\n    const [gasFees, setGasFees] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({});\n    const [titleData, setTitleData] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)({\n        title: \"Crowdfunding DApp\",\n        description: \"A decentralized crowdfunding platform built on blockchain technology\"\n    });\n    const [campaignsUpdatedFlag, setCampaignsUpdatedFlag] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0); // State untuk menandai update campaign\n    // Fungsi untuk memicu refresh data campaign\n    const triggerCampaignsRefresh = ()=>{\n        setCampaignsUpdatedFlag((prev)=>prev + 1);\n        console.log(\"Campaigns refresh triggered. Flag:\", campaignsUpdatedFlag + 1);\n    };\n    // Get current contract details\n    const getCurrentContract = ()=>{\n        return _contants__WEBPACK_IMPORTED_MODULE_3__.CONTRACTS[activeContract];\n    };\n    // Switch contract function\n    const switchContract = (contractType)=>{\n        setActiveContract(contractType);\n    };\n    // Get ETH price in USD with fallback\n    const getEthPrice = async ()=>{\n        try {\n            const response = await fetch(\"/api/eth-price\");\n            const data = await response.json();\n            const price = data.ethereum.usd;\n            console.log(\"Current ETH price:\", price); // Debug log\n            if (!price || price <= 0) {\n                throw new Error(\"Invalid price from API\");\n            }\n            return price;\n        } catch (error) {\n            console.warn(\"Failed to fetch ETH price, using fallback value:\", error);\n            return 2500; // Updated fallback value in USD\n        }\n    };\n    // Get transaction data from Etherscan\n    const getTransactionFromEtherscan = async (txHash)=>{\n        try {\n            const response = await fetch(\"https://api-sepolia.etherscan.io/api?module=proxy&action=eth_getTransactionByHash&txhash=\".concat(txHash, \"&apikey=YourApiKey\"));\n            const data = await response.json();\n            return data.result;\n        } catch (error) {\n            console.warn(\"Failed to fetch from Etherscan:\", error);\n            return null;\n        }\n    };\n    // Get transaction receipt from Etherscan\n    const getTransactionReceiptFromEtherscan = async (txHash)=>{\n        try {\n            const response = await fetch(\"https://api-sepolia.etherscan.io/api?module=proxy&action=eth_getTransactionReceipt&txhash=\".concat(txHash, \"&apikey=YourApiKey\"));\n            const data = await response.json();\n            return data.result;\n        } catch (error) {\n            console.warn(\"Failed to fetch receipt from Etherscan:\", error);\n            return null;\n        }\n    };\n    // Get gas fee for a transaction\n    const getGasFee = async (transaction)=>{\n        try {\n            const provider = transaction.provider;\n            const feeData = await provider.getFeeData();\n            const gasPrice = feeData.gasPrice || feeData.maxFeePerGas;\n            const gasLimit = await transaction.estimateGas();\n            const gasFee = gasPrice.mul(gasLimit);\n            // Get ETH price in USD\n            const ethPrice = await getEthPrice();\n            console.log(\"ETH price used for conversion:\", ethPrice); // Debug log\n            const gasFeeInEth = ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(gasFee);\n            const gasFeeInUsd = (parseFloat(gasFeeInEth) * ethPrice).toFixed(2);\n            console.log(\"Gas fee calculation:\", {\n                gasFeeInEth,\n                ethPrice,\n                gasFeeInUsd\n            }); // Debug log\n            return {\n                eth: gasFeeInEth,\n                usd: gasFeeInUsd\n            };\n        } catch (error) {\n            console.error(\"Error getting gas fee:\", error);\n            return {\n                eth: \"0\",\n                usd: \"0\"\n            };\n        }\n    };\n    // Store gas fee in localStorage\n    const storeGasFee = (txHash, gasFee)=>{\n        try {\n            const storedFees = JSON.parse(localStorage.getItem(\"gasFees\") || \"{}\");\n            storedFees[txHash] = gasFee;\n            localStorage.setItem(\"gasFees\", JSON.stringify(storedFees));\n            console.log(\"Stored gas fee:\", txHash, gasFee); // Debug log\n        } catch (error) {\n            console.warn(\"Error storing gas fee:\", error);\n        }\n    };\n    // Get stored gas fee\n    const getStoredGasFee = (txHash)=>{\n        try {\n            const storedFees = JSON.parse(localStorage.getItem(\"gasFees\") || \"{}\");\n            const fee = storedFees[txHash];\n            console.log(\"Retrieved gas fee:\", txHash, fee); // Debug log\n            return fee;\n        } catch (error) {\n            console.warn(\"Error getting stored gas fee:\", error);\n            return null;\n        }\n    };\n    // Create campaign with gas tracking\n    const createCampaign = async (campaign)=>{\n        const { title , description , amount , deadline  } = campaign;\n        const web3Modal = new (web3modal__WEBPACK_IMPORTED_MODULE_2___default())();\n        const connection = await web3Modal.connect();\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.providers.Web3Provider(connection);\n        const signer = provider.getSigner();\n        const contract = fetchContract(getCurrentContract().address, getCurrentContract().abi, signer);\n        try {\n            const transaction = await contract.createCampaign(currentAccount, title, description, ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.parseUnits(amount, 18), new Date(deadline).getTime());\n            // Get gas fee before waiting for transaction\n            const gasFee = await getGasFee(transaction);\n            // Update gas fees state\n            setGasFees((prev)=>({\n                    ...prev,\n                    createCampaign: {\n                        ...prev.createCampaign,\n                        [activeContract]: gasFee\n                    }\n                }));\n            await transaction.wait();\n            console.log(\"Contract Call Success\", transaction);\n            triggerCampaignsRefresh(); // <-- Panggil setelah sukses\n            return transaction;\n        } catch (error) {\n            console.log(\"Contract Call Failure!\", error);\n            throw error;\n        }\n    };\n    // Get campaigns\n    const getCampaigns = async ()=>{\n        const web3Modal = new (web3modal__WEBPACK_IMPORTED_MODULE_2___default())();\n        const connection = await web3Modal.connect();\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.providers.Web3Provider(connection);\n        const contract = fetchContract(getCurrentContract().address, getCurrentContract().abi, provider);\n        const campaigns = await contract.getCampaigns();\n        const parsedCampaigns = campaigns.map((campaign, i)=>({\n                owner: campaign.owner,\n                title: campaign.title,\n                description: campaign.description,\n                target: ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(campaign.target.toString()),\n                deadline: campaign.deadline.toNumber(),\n                amountCollected: ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(campaign.amountCollected.toString()),\n                pId: i,\n                contractVersion: activeContract // Add contract version\n            }));\n        return parsedCampaigns;\n    };\n    // Get user campaigns\n    const getUserCampaigns = async ()=>{\n        const web3Modal = new (web3modal__WEBPACK_IMPORTED_MODULE_2___default())();\n        const connection = await web3Modal.connect();\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.providers.Web3Provider(connection);\n        const contract = fetchContract(getCurrentContract().address, getCurrentContract().abi, provider);\n        const allCampaigns = await contract.getCampaigns();\n        const accounts = await window.ethereum.request({\n            method: \"eth_accounts\"\n        });\n        const currentUser = accounts[0];\n        const filteredCampaigns = allCampaigns.filter((campaign)=>campaign.owner.toLowerCase() === currentUser.toLowerCase());\n        const userData = filteredCampaigns.map((campaign, i)=>({\n                owner: campaign.owner,\n                title: campaign.title,\n                description: campaign.description,\n                target: ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(campaign.target.toString()),\n                deadline: campaign.deadline.toNumber(),\n                amountCollected: ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(campaign.amountCollected.toString()),\n                pId: i\n            }));\n        return userData;\n    };\n    // Get donations\n    const getDonations = async (pId)=>{\n        const web3Modal = new (web3modal__WEBPACK_IMPORTED_MODULE_2___default())();\n        const connection = await web3Modal.connect();\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.providers.Web3Provider(connection);\n        const contract = fetchContract(getCurrentContract().address, getCurrentContract().abi, provider);\n        const donations = await contract.getDonators(pId);\n        const numberOfDonations = donations[0].length;\n        const parsedDonations = [];\n        for(let i = 0; i < numberOfDonations; i++){\n            try {\n                const donatorAddress = donations[0][i];\n                const donationAmount = ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(donations[1][i].toString());\n                // Get all events from the contract\n                const filter = contract.filters.Donated(donatorAddress);\n                const events = await contract.queryFilter(filter);\n                console.log(\"Found events for\", donatorAddress, \":\", events); // Debug log\n                let gasFee = {\n                    eth: \"0\",\n                    usd: \"0\"\n                };\n                if (events.length > 0) {\n                    // Get the most recent event for this donation amount\n                    const matchingEvent = events.find((event)=>{\n                        const eventAmount = ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(event.args.amount.toString());\n                        return eventAmount === donationAmount;\n                    });\n                    if (matchingEvent) {\n                        const txHash = matchingEvent.transactionHash;\n                        console.log(\"Found transaction hash:\", txHash); // Debug log\n                        // Try to get stored gas fee first\n                        const storedFee = getStoredGasFee(txHash);\n                        if (storedFee) {\n                            console.log(\"Using stored fee:\", storedFee); // Debug log\n                            gasFee = storedFee;\n                        } else {\n                            console.log(\"No stored fee, getting from transaction\"); // Debug log\n                            // If not stored, get from transaction\n                            const tx = await provider.getTransaction(txHash);\n                            const receipt = await provider.getTransactionReceipt(txHash);\n                            if (tx && receipt) {\n                                console.log(\"Transaction data:\", tx); // Debug log\n                                console.log(\"Receipt data:\", receipt); // Debug log\n                                const gasUsed = receipt.gasUsed;\n                                const gasPrice = receipt.effectiveGasPrice || tx.gasPrice || tx.maxFeePerGas;\n                                const gasFeeInWei = gasUsed.mul(gasPrice);\n                                // Get ETH price in USD\n                                const ethPrice = await getEthPrice();\n                                console.log(\"ETH price for conversion:\", ethPrice); // Debug log\n                                const gasFeeInEth = ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(gasFeeInWei);\n                                const gasFeeInUsd = (parseFloat(gasFeeInEth) * ethPrice).toFixed(2);\n                                console.log(\"Gas fee calculation:\", {\n                                    gasUsed: gasUsed.toString(),\n                                    gasPrice: gasPrice.toString(),\n                                    gasFeeInWei: gasFeeInWei.toString(),\n                                    gasFeeInEth,\n                                    ethPrice,\n                                    gasFeeInUsd\n                                }); // Debug log\n                                gasFee = {\n                                    eth: gasFeeInEth,\n                                    usd: gasFeeInUsd\n                                };\n                                // Store the gas fee for future use\n                                storeGasFee(txHash, gasFee);\n                            }\n                        }\n                    }\n                }\n                // Create donation object\n                const donation = {\n                    donator: donatorAddress,\n                    donation: donationAmount,\n                    gasFee: gasFee\n                };\n                console.log(\"Created donation object:\", donation); // Debug log\n                parsedDonations.push(donation);\n            } catch (error) {\n                console.warn(\"Error getting gas fee for donation:\", error);\n                // If we can't get the actual gas fee, use an estimate\n                const feeData = await provider.getFeeData();\n                const gasPrice = feeData.gasPrice || feeData.maxFeePerGas;\n                const gasLimit = 100000;\n                const gasFeeInWei = gasPrice.mul(gasLimit);\n                const ethPrice = await getEthPrice();\n                const gasFeeInEth = ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(gasFeeInWei);\n                const gasFeeInUsd = (parseFloat(gasFeeInEth) * ethPrice).toFixed(2);\n                parsedDonations.push({\n                    donator: donations[0][i],\n                    donation: ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(donations[1][i].toString()),\n                    gasFee: {\n                        eth: gasFeeInEth,\n                        usd: gasFeeInUsd\n                    }\n                });\n            }\n        }\n        console.log(\"Final parsed donations:\", parsedDonations); // Debug log\n        return parsedDonations;\n    };\n    // Donate with gas tracking\n    const donate = async (pId, amount)=>{\n        const web3Modal = new (web3modal__WEBPACK_IMPORTED_MODULE_2___default())();\n        const connection = await web3Modal.connect();\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.providers.Web3Provider(connection);\n        const signer = provider.getSigner();\n        const contract = fetchContract(getCurrentContract().address, getCurrentContract().abi, signer);\n        try {\n            const transaction = await contract.donateToCampaign(pId, {\n                value: ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.parseEther(amount)\n            });\n            console.log(\"Transaction sent:\", transaction); // Debug log\n            // Wait for transaction to be mined\n            console.log(\"Waiting for transaction to be mined...\");\n            const receipt = await transaction.wait();\n            console.log(\"Transaction receipt:\", receipt); // Debug log\n            // Calculate gas fee from receipt\n            const gasUsed = receipt.gasUsed;\n            const gasPrice = transaction.gasPrice || transaction.maxFeePerGas;\n            const gasFeeInWei = gasUsed.mul(gasPrice);\n            // Get ETH price in USD\n            const ethPrice = await getEthPrice();\n            const gasFeeInEth = ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(gasFeeInWei);\n            const gasFeeInUsd = (parseFloat(gasFeeInEth) * ethPrice).toFixed(2);\n            const gasFee = {\n                eth: gasFeeInEth,\n                usd: gasFeeInUsd\n            };\n            console.log(\"Calculated gas fee:\", gasFee); // Debug log\n            // Store gas fee in localStorage\n            storeGasFee(transaction.hash, gasFee);\n            // Update gas fees state\n            setGasFees((prev)=>({\n                    ...prev,\n                    donate: {\n                        ...prev.donate,\n                        [activeContract]: gasFee\n                    }\n                }));\n            triggerCampaignsRefresh();\n            return transaction;\n        } catch (error) {\n            console.log(\"Contract Call Failure!\", error);\n            throw error;\n        }\n    };\n    // Batch donate with gas tracking\n    const batchDonate = async (ids, amounts)=>{\n        const web3Modal = new (web3modal__WEBPACK_IMPORTED_MODULE_2___default())();\n        const connection = await web3Modal.connect();\n        const provider = new ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.providers.Web3Provider(connection);\n        const signer = provider.getSigner();\n        const contract = fetchContract(getCurrentContract().address, getCurrentContract().abi, signer);\n        try {\n            // Calculate total value and format amounts properly\n            const totalValue = amounts.reduce((sum, amount)=>sum.add(ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.parseEther(amount.toString())), ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.BigNumber.from(0));\n            // Format amounts for the contract call\n            const formattedAmounts = amounts.map((amount)=>ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.parseEther(amount.toString()).toString());\n            console.log(\"Campaign IDs:\", ids); // Debug log\n            console.log(\"Sending amounts:\", formattedAmounts); // Debug log\n            console.log(\"Total value:\", ethers__WEBPACK_IMPORTED_MODULE_4__.ethers.utils.formatEther(totalValue)); // Debug log\n            let transaction;\n            let methodName;\n            // If only one campaign is selected, use regular donate function\n            if (ids.length === 1) {\n                console.log(\"Using single donation function\");\n                methodName = \"donateToCampaign\";\n                transaction = await contract.donateToCampaign(ids[0], {\n                    value: totalValue\n                });\n            } else {\n                // Use batch donation for multiple campaigns\n                console.log(\"Using batch donation function\");\n                methodName = activeContract === \"batch-processing\" ? \"donateBatch\" : \"batchDonate\";\n                transaction = await contract[methodName](ids, formattedAmounts, {\n                    value: totalValue\n                });\n            }\n            // Get gas fee before waiting for transaction\n            const gasFee = await getGasFee(transaction);\n            // Update gas fees state\n            setGasFees((prev)=>({\n                    ...prev,\n                    batchDonate: {\n                        ...prev.batchDonate,\n                        [activeContract]: gasFee\n                    }\n                }));\n            // Wait for transaction to be mined\n            const receipt = await transaction.wait();\n            // Log transaction for each campaign\n            for(let i = 0; i < ids.length; i++){\n                await createDonation(transaction.hash, ids[i], amounts[i], methodName);\n            }\n            triggerCampaignsRefresh();\n            return transaction;\n        } catch (error) {\n            console.log(\"Contract Call Failure!\", error);\n            throw error;\n        }\n    };\n    // Check if wallet is connected\n    const checkIfWalletConnected = async ()=>{\n        try {\n            if (!window.ethereum) return console.log(\"Install MetaMask\");\n            const accounts = await window.ethereum.request({\n                method: \"eth_accounts\"\n            });\n            if (accounts.length) {\n                setCurrentAccount(accounts[0]);\n            } else {\n                console.log(\"No Account Found\");\n            }\n        } catch (error) {\n            console.log(\"Something wrong while connecting to wallet!\");\n        }\n    };\n    // Connect wallet\n    const connectWallet = async ()=>{\n        try {\n            if (!window.ethereum) return console.log(\"Install Metamask!\");\n            const accounts = await window.ethereum.request({\n                method: \"eth_requestAccounts\"\n            });\n            setCurrentAccount(accounts[0]);\n        } catch (error) {\n            console.log(\"Error while connecting to wallet!\");\n        }\n    };\n    // Disconnect wallet\n    const disconnectWallet = async ()=>{\n        try {\n            const web3Modal = new (web3modal__WEBPACK_IMPORTED_MODULE_2___default())();\n            // Clear the cached provider\n            if (web3Modal.cachedProvider) {\n                await web3Modal.clearCachedProvider();\n            }\n            // Clear the current account\n            setCurrentAccount(\"\");\n            // Clear any stored wallet data in localStorage\n            localStorage.removeItem(\"WEB3_CONNECT_CACHED_PROVIDER\");\n            // Request MetaMask to disconnect\n            if (window.ethereum) {\n                await window.ethereum.request({\n                    method: \"wallet_requestPermissions\",\n                    params: [\n                        {\n                            eth_accounts: {}\n                        }\n                    ]\n                });\n            }\n            // Force reload the page to clear any remaining state\n            window.location.reload();\n        } catch (error) {\n            console.log(\"Error while disconnecting wallet!\", error);\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        checkIfWalletConnected();\n        // Add event listeners for MetaMask\n        if (window.ethereum) {\n            // Listen for account changes\n            window.ethereum.on(\"accountsChanged\", (accounts)=>{\n                if (accounts.length === 0) {\n                    // User disconnected their wallet\n                    setCurrentAccount(\"\");\n                    localStorage.removeItem(\"WEB3_CONNECT_CACHED_PROVIDER\");\n                } else {\n                    // User switched accounts\n                    setCurrentAccount(accounts[0]);\n                }\n            });\n            // Listen for chain changes\n            window.ethereum.on(\"chainChanged\", ()=>{\n                window.location.reload();\n            });\n            // Listen for disconnect\n            window.ethereum.on(\"disconnect\", ()=>{\n                setCurrentAccount(\"\");\n                localStorage.removeItem(\"WEB3_CONNECT_CACHED_PROVIDER\");\n            });\n        }\n        // Cleanup function\n        return ()=>{\n            if (window.ethereum) {\n                window.ethereum.removeAllListeners(\"accountsChanged\");\n                window.ethereum.removeAllListeners(\"chainChanged\");\n                window.ethereum.removeAllListeners(\"disconnect\");\n            }\n        };\n    }, []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(MultiContractContext.Provider, {\n        value: {\n            currentAccount,\n            activeContract,\n            gasFees,\n            titleData,\n            switchContract,\n            createCampaign,\n            getCampaigns,\n            getUserCampaigns,\n            donate,\n            batchDonate,\n            getDonations,\n            connectWallet,\n            disconnectWallet,\n            getCurrentContract,\n            campaignsUpdatedFlag,\n            getEthPrice\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/davemf/Coding/crowdfunding/Context/MultiContractContext.js\",\n        lineNumber: 612,\n        columnNumber: 9\n    }, undefined);\n};\n_s(MultiContractProvider, \"xl5Iu0SKZP6U08BOobouLIDhzb4=\");\n_c = MultiContractProvider;\nvar _c;\n$RefreshReg$(_c, \"MultiContractProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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T0FBTztvQkFDSCx5QkFBeUI7b0JBQ3pCeEosa0JBQWtCNEYsUUFBUSxDQUFDLEVBQUU7Z0JBQ2pDLENBQUM7WUFDTDtZQUVBLDJCQUEyQjtZQUMzQkMsT0FBT3JFLFFBQVEsQ0FBQ3FJLEVBQUUsQ0FBQyxnQkFBZ0IsSUFBTTtnQkFDckNoRSxPQUFPOEQsUUFBUSxDQUFDQyxNQUFNO1lBQzFCO1lBRUEsd0JBQXdCO1lBQ3hCL0QsT0FBT3JFLFFBQVEsQ0FBQ3FJLEVBQUUsQ0FBQyxjQUFjLElBQU07Z0JBQ25DN0osa0JBQWtCO2dCQUNsQndELGFBQWFnRyxVQUFVLENBQUM7WUFDNUI7UUFDSixDQUFDO1FBRUQsbUJBQW1CO1FBQ25CLE9BQU8sSUFBTTtZQUNULElBQUkzRCxPQUFPckUsUUFBUSxFQUFFO2dCQUNqQnFFLE9BQU9yRSxRQUFRLENBQUNzSSxrQkFBa0IsQ0FBQztnQkFDbkNqRSxPQUFPckUsUUFBUSxDQUFDc0ksa0JBQWtCLENBQUM7Z0JBQ25DakUsT0FBT3JFLFFBQVEsQ0FBQ3NJLGtCQUFrQixDQUFDO1lBQ3ZDLENBQUM7UUFDTDtJQUNKLEdBQUcsRUFBRTtJQUVMLHFCQUNJLDhEQUFDdksscUJBQXFCd0ssUUFBUTtRQUMxQjNCLE9BQU87WUFDSHJJO1lBQ0FFO1lBQ0FFO1lBQ0FFO1lBQ0FXO1lBQ0E4QztZQUNBZ0I7WUFDQVk7WUFDQXdDO1lBQ0FLO1lBQ0FsQztZQUNBK0M7WUFDQUM7WUFDQXRJO1lBQ0FOO1lBQ0FTO1FBQ0o7a0JBRUNwQjs7Ozs7O0FBR2IsRUFBRTtHQTltQldEO0tBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL0NvbnRleHQvTXVsdGlDb250cmFjdENvbnRleHQuanM/MTRiNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUVmZmVjdCwgY3JlYXRlQ29udGV4dCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFdlbmIzTW9kYWwgZnJvbSBcIndlYjNtb2RhbFwiO1xuaW1wb3J0IHsgZXRoZXJzIH0gZnJvbSBcImV0aGVyc1wiO1xuaW1wb3J0IHsgQ09OVFJBQ1RTIH0gZnJvbSBcIi4vY29udGFudHNcIjtcblxuLy8gQ3JlYXRlIGNvbnRleHRcbmV4cG9ydCBjb25zdCBNdWx0aUNvbnRyYWN0Q29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcblxuLy8gRmV0Y2ggY29udHJhY3QgZnVuY3Rpb25cbmNvbnN0IGZldGNoQ29udHJhY3QgPSAoYWRkcmVzcywgYWJpLCBzaWduZXJPclByb3ZpZGVyKSA9PlxuICAgIG5ldyBldGhlcnMuQ29udHJhY3QoYWRkcmVzcywgYWJpLCBzaWduZXJPclByb3ZpZGVyKTtcblxuZXhwb3J0IGNvbnN0IE11bHRpQ29udHJhY3RQcm92aWRlciA9ICh7IGNoaWxkcmVuIH0pID0+IHtcbiAgICBjb25zdCBbY3VycmVudEFjY291bnQsIHNldEN1cnJlbnRBY2NvdW50XSA9IHVzZVN0YXRlKFwiXCIpO1xuICAgIGNvbnN0IFthY3RpdmVDb250cmFjdCwgc2V0QWN0aXZlQ29udHJhY3RdID0gdXNlU3RhdGUoXCJvcHRpbWl6ZWRcIik7IC8vIERlZmF1bHQgdG8gb3B0aW1pemVkXG4gICAgY29uc3QgW2dhc0ZlZXMsIHNldEdhc0ZlZXNdID0gdXNlU3RhdGUoe30pO1xuICAgIGNvbnN0IFt0aXRsZURhdGEsIHNldFRpdGxlRGF0YV0gPSB1c2VTdGF0ZSh7XG4gICAgICAgIHRpdGxlOiBcIkNyb3dkZnVuZGluZyBEQXBwXCIsXG4gICAgICAgIGRlc2NyaXB0aW9uOiBcIkEgZGVjZW50cmFsaXplZCBjcm93ZGZ1bmRpbmcgcGxhdGZvcm0gYnVpbHQgb24gYmxvY2tjaGFpbiB0ZWNobm9sb2d5XCJcbiAgICB9KTtcbiAgICBjb25zdCBbY2FtcGFpZ25zVXBkYXRlZEZsYWcsIHNldENhbXBhaWduc1VwZGF0ZWRGbGFnXSA9IHVzZVN0YXRlKDApOyAvLyBTdGF0ZSB1bnR1ayBtZW5hbmRhaSB1cGRhdGUgY2FtcGFpZ25cblxuICAgIC8vIEZ1bmdzaSB1bnR1ayBtZW1pY3UgcmVmcmVzaCBkYXRhIGNhbXBhaWduXG4gICAgY29uc3QgdHJpZ2dlckNhbXBhaWduc1JlZnJlc2ggPSAoKSA9PiB7XG4gICAgICAgIHNldENhbXBhaWduc1VwZGF0ZWRGbGFnKHByZXYgPT4gcHJldiArIDEpO1xuICAgICAgICBjb25zb2xlLmxvZyhcIkNhbXBhaWducyByZWZyZXNoIHRyaWdnZXJlZC4gRmxhZzpcIiwgY2FtcGFpZ25zVXBkYXRlZEZsYWcgKyAxKTtcbiAgICB9O1xuXG4gICAgLy8gR2V0IGN1cnJlbnQgY29udHJhY3QgZGV0YWlsc1xuICAgIGNvbnN0IGdldEN1cnJlbnRDb250cmFjdCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIENPTlRSQUNUU1thY3RpdmVDb250cmFjdF07XG4gICAgfTtcblxuICAgIC8vIFN3aXRjaCBjb250cmFjdCBmdW5jdGlvblxuICAgIGNvbnN0IHN3aXRjaENvbnRyYWN0ID0gKGNvbnRyYWN0VHlwZSkgPT4ge1xuICAgICAgICBzZXRBY3RpdmVDb250cmFjdChjb250cmFjdFR5cGUpO1xuICAgIH07XG5cbiAgICAvLyBHZXQgRVRIIHByaWNlIGluIFVTRCB3aXRoIGZhbGxiYWNrXG4gICAgY29uc3QgZ2V0RXRoUHJpY2UgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL2V0aC1wcmljZScpO1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgIGNvbnN0IHByaWNlID0gZGF0YS5ldGhlcmV1bS51c2Q7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkN1cnJlbnQgRVRIIHByaWNlOlwiLCBwcmljZSk7IC8vIERlYnVnIGxvZ1xuICAgICAgICAgICAgaWYgKCFwcmljZSB8fCBwcmljZSA8PSAwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiSW52YWxpZCBwcmljZSBmcm9tIEFQSVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBwcmljZTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcIkZhaWxlZCB0byBmZXRjaCBFVEggcHJpY2UsIHVzaW5nIGZhbGxiYWNrIHZhbHVlOlwiLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gMjUwMDsgLy8gVXBkYXRlZCBmYWxsYmFjayB2YWx1ZSBpbiBVU0RcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBHZXQgdHJhbnNhY3Rpb24gZGF0YSBmcm9tIEV0aGVyc2NhblxuICAgIGNvbnN0IGdldFRyYW5zYWN0aW9uRnJvbUV0aGVyc2NhbiA9IGFzeW5jICh0eEhhc2gpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYGh0dHBzOi8vYXBpLXNlcG9saWEuZXRoZXJzY2FuLmlvL2FwaT9tb2R1bGU9cHJveHkmYWN0aW9uPWV0aF9nZXRUcmFuc2FjdGlvbkJ5SGFzaCZ0eGhhc2g9JHt0eEhhc2h9JmFwaWtleT1Zb3VyQXBpS2V5YCk7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICAgICAgcmV0dXJuIGRhdGEucmVzdWx0O1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiRmFpbGVkIHRvIGZldGNoIGZyb20gRXRoZXJzY2FuOlwiLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBHZXQgdHJhbnNhY3Rpb24gcmVjZWlwdCBmcm9tIEV0aGVyc2NhblxuICAgIGNvbnN0IGdldFRyYW5zYWN0aW9uUmVjZWlwdEZyb21FdGhlcnNjYW4gPSBhc3luYyAodHhIYXNoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGBodHRwczovL2FwaS1zZXBvbGlhLmV0aGVyc2Nhbi5pby9hcGk/bW9kdWxlPXByb3h5JmFjdGlvbj1ldGhfZ2V0VHJhbnNhY3Rpb25SZWNlaXB0JnR4aGFzaD0ke3R4SGFzaH0mYXBpa2V5PVlvdXJBcGlLZXlgKTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgICByZXR1cm4gZGF0YS5yZXN1bHQ7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJGYWlsZWQgdG8gZmV0Y2ggcmVjZWlwdCBmcm9tIEV0aGVyc2NhbjpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gR2V0IGdhcyBmZWUgZm9yIGEgdHJhbnNhY3Rpb25cbiAgICBjb25zdCBnZXRHYXNGZWUgPSBhc3luYyAodHJhbnNhY3Rpb24pID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHByb3ZpZGVyID0gdHJhbnNhY3Rpb24ucHJvdmlkZXI7XG4gICAgICAgICAgICBjb25zdCBmZWVEYXRhID0gYXdhaXQgcHJvdmlkZXIuZ2V0RmVlRGF0YSgpO1xuICAgICAgICAgICAgY29uc3QgZ2FzUHJpY2UgPSBmZWVEYXRhLmdhc1ByaWNlIHx8IGZlZURhdGEubWF4RmVlUGVyR2FzO1xuICAgICAgICAgICAgY29uc3QgZ2FzTGltaXQgPSBhd2FpdCB0cmFuc2FjdGlvbi5lc3RpbWF0ZUdhcygpO1xuICAgICAgICAgICAgY29uc3QgZ2FzRmVlID0gZ2FzUHJpY2UubXVsKGdhc0xpbWl0KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gR2V0IEVUSCBwcmljZSBpbiBVU0RcbiAgICAgICAgICAgIGNvbnN0IGV0aFByaWNlID0gYXdhaXQgZ2V0RXRoUHJpY2UoKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRVRIIHByaWNlIHVzZWQgZm9yIGNvbnZlcnNpb246XCIsIGV0aFByaWNlKTsgLy8gRGVidWcgbG9nXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGdhc0ZlZUluRXRoID0gZXRoZXJzLnV0aWxzLmZvcm1hdEV0aGVyKGdhc0ZlZSk7XG4gICAgICAgICAgICBjb25zdCBnYXNGZWVJblVzZCA9IChwYXJzZUZsb2F0KGdhc0ZlZUluRXRoKSAqIGV0aFByaWNlKS50b0ZpeGVkKDIpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkdhcyBmZWUgY2FsY3VsYXRpb246XCIsIHtcbiAgICAgICAgICAgICAgICBnYXNGZWVJbkV0aCxcbiAgICAgICAgICAgICAgICBldGhQcmljZSxcbiAgICAgICAgICAgICAgICBnYXNGZWVJblVzZFxuICAgICAgICAgICAgfSk7IC8vIERlYnVnIGxvZ1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGV0aDogZ2FzRmVlSW5FdGgsXG4gICAgICAgICAgICAgICAgdXNkOiBnYXNGZWVJblVzZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBnZXR0aW5nIGdhcyBmZWU6XCIsIGVycm9yKTtcbiAgICAgICAgICAgIHJldHVybiB7IGV0aDogXCIwXCIsIHVzZDogXCIwXCIgfTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBTdG9yZSBnYXMgZmVlIGluIGxvY2FsU3RvcmFnZVxuICAgIGNvbnN0IHN0b3JlR2FzRmVlID0gKHR4SGFzaCwgZ2FzRmVlKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCBzdG9yZWRGZWVzID0gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnZ2FzRmVlcycpIHx8ICd7fScpO1xuICAgICAgICAgICAgc3RvcmVkRmVlc1t0eEhhc2hdID0gZ2FzRmVlO1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2dhc0ZlZXMnLCBKU09OLnN0cmluZ2lmeShzdG9yZWRGZWVzKSk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlN0b3JlZCBnYXMgZmVlOlwiLCB0eEhhc2gsIGdhc0ZlZSk7IC8vIERlYnVnIGxvZ1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiRXJyb3Igc3RvcmluZyBnYXMgZmVlOlwiLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gR2V0IHN0b3JlZCBnYXMgZmVlXG4gICAgY29uc3QgZ2V0U3RvcmVkR2FzRmVlID0gKHR4SGFzaCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qgc3RvcmVkRmVlcyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2dhc0ZlZXMnKSB8fCAne30nKTtcbiAgICAgICAgICAgIGNvbnN0IGZlZSA9IHN0b3JlZEZlZXNbdHhIYXNoXTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUmV0cmlldmVkIGdhcyBmZWU6XCIsIHR4SGFzaCwgZmVlKTsgLy8gRGVidWcgbG9nXG4gICAgICAgICAgICByZXR1cm4gZmVlO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiRXJyb3IgZ2V0dGluZyBzdG9yZWQgZ2FzIGZlZTpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gQ3JlYXRlIGNhbXBhaWduIHdpdGggZ2FzIHRyYWNraW5nXG4gICAgY29uc3QgY3JlYXRlQ2FtcGFpZ24gPSBhc3luYyAoY2FtcGFpZ24pID0+IHtcbiAgICAgICAgY29uc3QgeyB0aXRsZSwgZGVzY3JpcHRpb24sIGFtb3VudCwgZGVhZGxpbmUgfSA9IGNhbXBhaWduO1xuICAgICAgICBjb25zdCB3ZWIzTW9kYWwgPSBuZXcgV2VuYjNNb2RhbCgpO1xuICAgICAgICBjb25zdCBjb25uZWN0aW9uID0gYXdhaXQgd2ViM01vZGFsLmNvbm5lY3QoKTtcbiAgICAgICAgY29uc3QgcHJvdmlkZXIgPSBuZXcgZXRoZXJzLnByb3ZpZGVycy5XZWIzUHJvdmlkZXIoY29ubmVjdGlvbik7XG4gICAgICAgIGNvbnN0IHNpZ25lciA9IHByb3ZpZGVyLmdldFNpZ25lcigpO1xuICAgICAgICBjb25zdCBjb250cmFjdCA9IGZldGNoQ29udHJhY3QoXG4gICAgICAgICAgICBnZXRDdXJyZW50Q29udHJhY3QoKS5hZGRyZXNzLFxuICAgICAgICAgICAgZ2V0Q3VycmVudENvbnRyYWN0KCkuYWJpLFxuICAgICAgICAgICAgc2lnbmVyXG4gICAgICAgICk7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHRyYW5zYWN0aW9uID0gYXdhaXQgY29udHJhY3QuY3JlYXRlQ2FtcGFpZ24oXG4gICAgICAgICAgICAgICAgY3VycmVudEFjY291bnQsXG4gICAgICAgICAgICAgICAgdGl0bGUsXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb24sXG4gICAgICAgICAgICAgICAgZXRoZXJzLnV0aWxzLnBhcnNlVW5pdHMoYW1vdW50LCAxOCksXG4gICAgICAgICAgICAgICAgbmV3IERhdGUoZGVhZGxpbmUpLmdldFRpbWUoKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgLy8gR2V0IGdhcyBmZWUgYmVmb3JlIHdhaXRpbmcgZm9yIHRyYW5zYWN0aW9uXG4gICAgICAgICAgICBjb25zdCBnYXNGZWUgPSBhd2FpdCBnZXRHYXNGZWUodHJhbnNhY3Rpb24pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBVcGRhdGUgZ2FzIGZlZXMgc3RhdGVcbiAgICAgICAgICAgIHNldEdhc0ZlZXMocHJldiA9PiAoe1xuICAgICAgICAgICAgICAgIC4uLnByZXYsXG4gICAgICAgICAgICAgICAgY3JlYXRlQ2FtcGFpZ246IHtcbiAgICAgICAgICAgICAgICAgICAgLi4ucHJldi5jcmVhdGVDYW1wYWlnbixcbiAgICAgICAgICAgICAgICAgICAgW2FjdGl2ZUNvbnRyYWN0XTogZ2FzRmVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSkpO1xuXG4gICAgICAgICAgICBhd2FpdCB0cmFuc2FjdGlvbi53YWl0KCk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNvbnRyYWN0IENhbGwgU3VjY2Vzc1wiLCB0cmFuc2FjdGlvbik7XG4gICAgICAgICAgICB0cmlnZ2VyQ2FtcGFpZ25zUmVmcmVzaCgpOyAvLyA8LS0gUGFuZ2dpbCBzZXRlbGFoIHN1a3Nlc1xuICAgICAgICAgICAgcmV0dXJuIHRyYW5zYWN0aW9uO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJDb250cmFjdCBDYWxsIEZhaWx1cmUhXCIsIGVycm9yKTtcbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIEdldCBjYW1wYWlnbnNcbiAgICBjb25zdCBnZXRDYW1wYWlnbnMgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHdlYjNNb2RhbCA9IG5ldyBXZW5iM01vZGFsKCk7XG4gICAgICAgIGNvbnN0IGNvbm5lY3Rpb24gPSBhd2FpdCB3ZWIzTW9kYWwuY29ubmVjdCgpO1xuICAgICAgICBjb25zdCBwcm92aWRlciA9IG5ldyBldGhlcnMucHJvdmlkZXJzLldlYjNQcm92aWRlcihjb25uZWN0aW9uKTtcbiAgICAgICAgY29uc3QgY29udHJhY3QgPSBmZXRjaENvbnRyYWN0KFxuICAgICAgICAgICAgZ2V0Q3VycmVudENvbnRyYWN0KCkuYWRkcmVzcyxcbiAgICAgICAgICAgIGdldEN1cnJlbnRDb250cmFjdCgpLmFiaSxcbiAgICAgICAgICAgIHByb3ZpZGVyXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgY2FtcGFpZ25zID0gYXdhaXQgY29udHJhY3QuZ2V0Q2FtcGFpZ25zKCk7XG5cbiAgICAgICAgY29uc3QgcGFyc2VkQ2FtcGFpZ25zID0gY2FtcGFpZ25zLm1hcCgoY2FtcGFpZ24sIGkpID0+ICh7XG4gICAgICAgICAgICBvd25lcjogY2FtcGFpZ24ub3duZXIsXG4gICAgICAgICAgICB0aXRsZTogY2FtcGFpZ24udGl0bGUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogY2FtcGFpZ24uZGVzY3JpcHRpb24sXG4gICAgICAgICAgICB0YXJnZXQ6IGV0aGVycy51dGlscy5mb3JtYXRFdGhlcihjYW1wYWlnbi50YXJnZXQudG9TdHJpbmcoKSksXG4gICAgICAgICAgICBkZWFkbGluZTogY2FtcGFpZ24uZGVhZGxpbmUudG9OdW1iZXIoKSxcbiAgICAgICAgICAgIGFtb3VudENvbGxlY3RlZDogZXRoZXJzLnV0aWxzLmZvcm1hdEV0aGVyKFxuICAgICAgICAgICAgICAgIGNhbXBhaWduLmFtb3VudENvbGxlY3RlZC50b1N0cmluZygpXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgcElkOiBpLFxuICAgICAgICAgICAgY29udHJhY3RWZXJzaW9uOiBhY3RpdmVDb250cmFjdCAvLyBBZGQgY29udHJhY3QgdmVyc2lvblxuICAgICAgICB9KSk7XG5cbiAgICAgICAgcmV0dXJuIHBhcnNlZENhbXBhaWducztcbiAgICB9O1xuXG4gICAgLy8gR2V0IHVzZXIgY2FtcGFpZ25zXG4gICAgY29uc3QgZ2V0VXNlckNhbXBhaWducyA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgY29uc3Qgd2ViM01vZGFsID0gbmV3IFdlbmIzTW9kYWwoKTtcbiAgICAgICAgY29uc3QgY29ubmVjdGlvbiA9IGF3YWl0IHdlYjNNb2RhbC5jb25uZWN0KCk7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gbmV3IGV0aGVycy5wcm92aWRlcnMuV2ViM1Byb3ZpZGVyKGNvbm5lY3Rpb24pO1xuICAgICAgICBjb25zdCBjb250cmFjdCA9IGZldGNoQ29udHJhY3QoXG4gICAgICAgICAgICBnZXRDdXJyZW50Q29udHJhY3QoKS5hZGRyZXNzLFxuICAgICAgICAgICAgZ2V0Q3VycmVudENvbnRyYWN0KCkuYWJpLFxuICAgICAgICAgICAgcHJvdmlkZXJcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBhbGxDYW1wYWlnbnMgPSBhd2FpdCBjb250cmFjdC5nZXRDYW1wYWlnbnMoKTtcbiAgICAgICAgY29uc3QgYWNjb3VudHMgPSBhd2FpdCB3aW5kb3cuZXRoZXJldW0ucmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6IFwiZXRoX2FjY291bnRzXCIsXG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCBjdXJyZW50VXNlciA9IGFjY291bnRzWzBdO1xuXG4gICAgICAgIGNvbnN0IGZpbHRlcmVkQ2FtcGFpZ25zID0gYWxsQ2FtcGFpZ25zLmZpbHRlcihcbiAgICAgICAgICAgIChjYW1wYWlnbikgPT5cbiAgICAgICAgICAgICAgICBjYW1wYWlnbi5vd25lci50b0xvd2VyQ2FzZSgpID09PSBjdXJyZW50VXNlci50b0xvd2VyQ2FzZSgpXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgdXNlckRhdGEgPSBmaWx0ZXJlZENhbXBhaWducy5tYXAoKGNhbXBhaWduLCBpKSA9PiAoe1xuICAgICAgICAgICAgb3duZXI6IGNhbXBhaWduLm93bmVyLFxuICAgICAgICAgICAgdGl0bGU6IGNhbXBhaWduLnRpdGxlLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IGNhbXBhaWduLmRlc2NyaXB0aW9uLFxuICAgICAgICAgICAgdGFyZ2V0OiBldGhlcnMudXRpbHMuZm9ybWF0RXRoZXIoY2FtcGFpZ24udGFyZ2V0LnRvU3RyaW5nKCkpLFxuICAgICAgICAgICAgZGVhZGxpbmU6IGNhbXBhaWduLmRlYWRsaW5lLnRvTnVtYmVyKCksXG4gICAgICAgICAgICBhbW91bnRDb2xsZWN0ZWQ6IGV0aGVycy51dGlscy5mb3JtYXRFdGhlcihcbiAgICAgICAgICAgICAgICBjYW1wYWlnbi5hbW91bnRDb2xsZWN0ZWQudG9TdHJpbmcoKVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHBJZDogaSxcbiAgICAgICAgfSkpO1xuXG4gICAgICAgIHJldHVybiB1c2VyRGF0YTtcbiAgICB9O1xuXG4gICAgLy8gR2V0IGRvbmF0aW9uc1xuICAgIGNvbnN0IGdldERvbmF0aW9ucyA9IGFzeW5jIChwSWQpID0+IHtcbiAgICAgICAgY29uc3Qgd2ViM01vZGFsID0gbmV3IFdlbmIzTW9kYWwoKTtcbiAgICAgICAgY29uc3QgY29ubmVjdGlvbiA9IGF3YWl0IHdlYjNNb2RhbC5jb25uZWN0KCk7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gbmV3IGV0aGVycy5wcm92aWRlcnMuV2ViM1Byb3ZpZGVyKGNvbm5lY3Rpb24pO1xuICAgICAgICBjb25zdCBjb250cmFjdCA9IGZldGNoQ29udHJhY3QoXG4gICAgICAgICAgICBnZXRDdXJyZW50Q29udHJhY3QoKS5hZGRyZXNzLFxuICAgICAgICAgICAgZ2V0Q3VycmVudENvbnRyYWN0KCkuYWJpLFxuICAgICAgICAgICAgcHJvdmlkZXJcbiAgICAgICAgKTtcblxuICAgICAgICBjb25zdCBkb25hdGlvbnMgPSBhd2FpdCBjb250cmFjdC5nZXREb25hdG9ycyhwSWQpO1xuICAgICAgICBjb25zdCBudW1iZXJPZkRvbmF0aW9ucyA9IGRvbmF0aW9uc1swXS5sZW5ndGg7XG5cbiAgICAgICAgY29uc3QgcGFyc2VkRG9uYXRpb25zID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBudW1iZXJPZkRvbmF0aW9uczsgaSsrKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRvbmF0b3JBZGRyZXNzID0gZG9uYXRpb25zWzBdW2ldO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRvbmF0aW9uQW1vdW50ID0gZXRoZXJzLnV0aWxzLmZvcm1hdEV0aGVyKGRvbmF0aW9uc1sxXVtpXS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBHZXQgYWxsIGV2ZW50cyBmcm9tIHRoZSBjb250cmFjdFxuICAgICAgICAgICAgICAgIGNvbnN0IGZpbHRlciA9IGNvbnRyYWN0LmZpbHRlcnMuRG9uYXRlZChkb25hdG9yQWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgY29uc3QgZXZlbnRzID0gYXdhaXQgY29udHJhY3QucXVlcnlGaWx0ZXIoZmlsdGVyKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkZvdW5kIGV2ZW50cyBmb3JcIiwgZG9uYXRvckFkZHJlc3MsIFwiOlwiLCBldmVudHMpOyAvLyBEZWJ1ZyBsb2dcblxuICAgICAgICAgICAgICAgIGxldCBnYXNGZWUgPSB7IGV0aDogXCIwXCIsIHVzZDogXCIwXCIgfTtcblxuICAgICAgICAgICAgICAgIGlmIChldmVudHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBHZXQgdGhlIG1vc3QgcmVjZW50IGV2ZW50IGZvciB0aGlzIGRvbmF0aW9uIGFtb3VudFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRjaGluZ0V2ZW50ID0gZXZlbnRzLmZpbmQoZXZlbnQgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXZlbnRBbW91bnQgPSBldGhlcnMudXRpbHMuZm9ybWF0RXRoZXIoZXZlbnQuYXJncy5hbW91bnQudG9TdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnRBbW91bnQgPT09IGRvbmF0aW9uQW1vdW50O1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hpbmdFdmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHhIYXNoID0gbWF0Y2hpbmdFdmVudC50cmFuc2FjdGlvbkhhc2g7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkZvdW5kIHRyYW5zYWN0aW9uIGhhc2g6XCIsIHR4SGFzaCk7IC8vIERlYnVnIGxvZ1xuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUcnkgdG8gZ2V0IHN0b3JlZCBnYXMgZmVlIGZpcnN0XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzdG9yZWRGZWUgPSBnZXRTdG9yZWRHYXNGZWUodHhIYXNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdG9yZWRGZWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlVzaW5nIHN0b3JlZCBmZWU6XCIsIHN0b3JlZEZlZSk7IC8vIERlYnVnIGxvZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhc0ZlZSA9IHN0b3JlZEZlZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJObyBzdG9yZWQgZmVlLCBnZXR0aW5nIGZyb20gdHJhbnNhY3Rpb25cIik7IC8vIERlYnVnIGxvZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIG5vdCBzdG9yZWQsIGdldCBmcm9tIHRyYW5zYWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHggPSBhd2FpdCBwcm92aWRlci5nZXRUcmFuc2FjdGlvbih0eEhhc2gpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlY2VpcHQgPSBhd2FpdCBwcm92aWRlci5nZXRUcmFuc2FjdGlvblJlY2VpcHQodHhIYXNoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHggJiYgcmVjZWlwdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlRyYW5zYWN0aW9uIGRhdGE6XCIsIHR4KTsgLy8gRGVidWcgbG9nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiUmVjZWlwdCBkYXRhOlwiLCByZWNlaXB0KTsgLy8gRGVidWcgbG9nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBnYXNVc2VkID0gcmVjZWlwdC5nYXNVc2VkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBnYXNQcmljZSA9IHJlY2VpcHQuZWZmZWN0aXZlR2FzUHJpY2UgfHwgdHguZ2FzUHJpY2UgfHwgdHgubWF4RmVlUGVyR2FzO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBnYXNGZWVJbldlaSA9IGdhc1VzZWQubXVsKGdhc1ByaWNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEdldCBFVEggcHJpY2UgaW4gVVNEXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV0aFByaWNlID0gYXdhaXQgZ2V0RXRoUHJpY2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJFVEggcHJpY2UgZm9yIGNvbnZlcnNpb246XCIsIGV0aFByaWNlKTsgLy8gRGVidWcgbG9nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBnYXNGZWVJbkV0aCA9IGV0aGVycy51dGlscy5mb3JtYXRFdGhlcihnYXNGZWVJbldlaSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGdhc0ZlZUluVXNkID0gKHBhcnNlRmxvYXQoZ2FzRmVlSW5FdGgpICogZXRoUHJpY2UpLnRvRml4ZWQoMik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkdhcyBmZWUgY2FsY3VsYXRpb246XCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhc1VzZWQ6IGdhc1VzZWQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdhc1ByaWNlOiBnYXNQcmljZS50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FzRmVlSW5XZWk6IGdhc0ZlZUluV2VpLnRvU3RyaW5nKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnYXNGZWVJbkV0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV0aFByaWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FzRmVlSW5Vc2RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7IC8vIERlYnVnIGxvZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2FzRmVlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXRoOiBnYXNGZWVJbkV0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVzZDogZ2FzRmVlSW5Vc2RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBTdG9yZSB0aGUgZ2FzIGZlZSBmb3IgZnV0dXJlIHVzZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG9yZUdhc0ZlZSh0eEhhc2gsIGdhc0ZlZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gQ3JlYXRlIGRvbmF0aW9uIG9iamVjdFxuICAgICAgICAgICAgICAgIGNvbnN0IGRvbmF0aW9uID0ge1xuICAgICAgICAgICAgICAgICAgICBkb25hdG9yOiBkb25hdG9yQWRkcmVzcyxcbiAgICAgICAgICAgICAgICAgICAgZG9uYXRpb246IGRvbmF0aW9uQW1vdW50LFxuICAgICAgICAgICAgICAgICAgICBnYXNGZWU6IGdhc0ZlZVxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNyZWF0ZWQgZG9uYXRpb24gb2JqZWN0OlwiLCBkb25hdGlvbik7IC8vIERlYnVnIGxvZ1xuICAgICAgICAgICAgICAgIHBhcnNlZERvbmF0aW9ucy5wdXNoKGRvbmF0aW9uKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiRXJyb3IgZ2V0dGluZyBnYXMgZmVlIGZvciBkb25hdGlvbjpcIiwgZXJyb3IpO1xuICAgICAgICAgICAgICAgIC8vIElmIHdlIGNhbid0IGdldCB0aGUgYWN0dWFsIGdhcyBmZWUsIHVzZSBhbiBlc3RpbWF0ZVxuICAgICAgICAgICAgICAgIGNvbnN0IGZlZURhdGEgPSBhd2FpdCBwcm92aWRlci5nZXRGZWVEYXRhKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgZ2FzUHJpY2UgPSBmZWVEYXRhLmdhc1ByaWNlIHx8IGZlZURhdGEubWF4RmVlUGVyR2FzO1xuICAgICAgICAgICAgICAgIGNvbnN0IGdhc0xpbWl0ID0gMTAwMDAwO1xuICAgICAgICAgICAgICAgIGNvbnN0IGdhc0ZlZUluV2VpID0gZ2FzUHJpY2UubXVsKGdhc0xpbWl0KTtcbiAgICAgICAgICAgICAgICBjb25zdCBldGhQcmljZSA9IGF3YWl0IGdldEV0aFByaWNlKCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3QgZ2FzRmVlSW5FdGggPSBldGhlcnMudXRpbHMuZm9ybWF0RXRoZXIoZ2FzRmVlSW5XZWkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGdhc0ZlZUluVXNkID0gKHBhcnNlRmxvYXQoZ2FzRmVlSW5FdGgpICogZXRoUHJpY2UpLnRvRml4ZWQoMik7XG5cbiAgICAgICAgICAgICAgICBwYXJzZWREb25hdGlvbnMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGRvbmF0b3I6IGRvbmF0aW9uc1swXVtpXSxcbiAgICAgICAgICAgICAgICAgICAgZG9uYXRpb246IGV0aGVycy51dGlscy5mb3JtYXRFdGhlcihkb25hdGlvbnNbMV1baV0udG9TdHJpbmcoKSksXG4gICAgICAgICAgICAgICAgICAgIGdhc0ZlZToge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXRoOiBnYXNGZWVJbkV0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZDogZ2FzRmVlSW5Vc2RcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc29sZS5sb2coXCJGaW5hbCBwYXJzZWQgZG9uYXRpb25zOlwiLCBwYXJzZWREb25hdGlvbnMpOyAvLyBEZWJ1ZyBsb2dcbiAgICAgICAgcmV0dXJuIHBhcnNlZERvbmF0aW9ucztcbiAgICB9O1xuXG4gICAgLy8gRG9uYXRlIHdpdGggZ2FzIHRyYWNraW5nXG4gICAgY29uc3QgZG9uYXRlID0gYXN5bmMgKHBJZCwgYW1vdW50KSA9PiB7XG4gICAgICAgIGNvbnN0IHdlYjNNb2RhbCA9IG5ldyBXZW5iM01vZGFsKCk7XG4gICAgICAgIGNvbnN0IGNvbm5lY3Rpb24gPSBhd2FpdCB3ZWIzTW9kYWwuY29ubmVjdCgpO1xuICAgICAgICBjb25zdCBwcm92aWRlciA9IG5ldyBldGhlcnMucHJvdmlkZXJzLldlYjNQcm92aWRlcihjb25uZWN0aW9uKTtcbiAgICAgICAgY29uc3Qgc2lnbmVyID0gcHJvdmlkZXIuZ2V0U2lnbmVyKCk7XG4gICAgICAgIGNvbnN0IGNvbnRyYWN0ID0gZmV0Y2hDb250cmFjdChcbiAgICAgICAgICAgIGdldEN1cnJlbnRDb250cmFjdCgpLmFkZHJlc3MsXG4gICAgICAgICAgICBnZXRDdXJyZW50Q29udHJhY3QoKS5hYmksXG4gICAgICAgICAgICBzaWduZXJcbiAgICAgICAgKTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgdHJhbnNhY3Rpb24gPSBhd2FpdCBjb250cmFjdC5kb25hdGVUb0NhbXBhaWduKHBJZCwge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBldGhlcnMudXRpbHMucGFyc2VFdGhlcihhbW91bnQpLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVHJhbnNhY3Rpb24gc2VudDpcIiwgdHJhbnNhY3Rpb24pOyAvLyBEZWJ1ZyBsb2dcblxuICAgICAgICAgICAgLy8gV2FpdCBmb3IgdHJhbnNhY3Rpb24gdG8gYmUgbWluZWRcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiV2FpdGluZyBmb3IgdHJhbnNhY3Rpb24gdG8gYmUgbWluZWQuLi5cIik7XG4gICAgICAgICAgICBjb25zdCByZWNlaXB0ID0gYXdhaXQgdHJhbnNhY3Rpb24ud2FpdCgpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJUcmFuc2FjdGlvbiByZWNlaXB0OlwiLCByZWNlaXB0KTsgLy8gRGVidWcgbG9nXG5cbiAgICAgICAgICAgIC8vIENhbGN1bGF0ZSBnYXMgZmVlIGZyb20gcmVjZWlwdFxuICAgICAgICAgICAgY29uc3QgZ2FzVXNlZCA9IHJlY2VpcHQuZ2FzVXNlZDtcbiAgICAgICAgICAgIGNvbnN0IGdhc1ByaWNlID0gdHJhbnNhY3Rpb24uZ2FzUHJpY2UgfHwgdHJhbnNhY3Rpb24ubWF4RmVlUGVyR2FzO1xuICAgICAgICAgICAgY29uc3QgZ2FzRmVlSW5XZWkgPSBnYXNVc2VkLm11bChnYXNQcmljZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEdldCBFVEggcHJpY2UgaW4gVVNEXG4gICAgICAgICAgICBjb25zdCBldGhQcmljZSA9IGF3YWl0IGdldEV0aFByaWNlKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGdhc0ZlZUluRXRoID0gZXRoZXJzLnV0aWxzLmZvcm1hdEV0aGVyKGdhc0ZlZUluV2VpKTtcbiAgICAgICAgICAgIGNvbnN0IGdhc0ZlZUluVXNkID0gKHBhcnNlRmxvYXQoZ2FzRmVlSW5FdGgpICogZXRoUHJpY2UpLnRvRml4ZWQoMik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGNvbnN0IGdhc0ZlZSA9IHtcbiAgICAgICAgICAgICAgICBldGg6IGdhc0ZlZUluRXRoLFxuICAgICAgICAgICAgICAgIHVzZDogZ2FzRmVlSW5Vc2RcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ2FsY3VsYXRlZCBnYXMgZmVlOlwiLCBnYXNGZWUpOyAvLyBEZWJ1ZyBsb2dcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gU3RvcmUgZ2FzIGZlZSBpbiBsb2NhbFN0b3JhZ2VcbiAgICAgICAgICAgIHN0b3JlR2FzRmVlKHRyYW5zYWN0aW9uLmhhc2gsIGdhc0ZlZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBnYXMgZmVlcyBzdGF0ZVxuICAgICAgICAgICAgc2V0R2FzRmVlcyhwcmV2ID0+ICh7XG4gICAgICAgICAgICAgICAgLi4ucHJldixcbiAgICAgICAgICAgICAgICBkb25hdGU6IHtcbiAgICAgICAgICAgICAgICAgICAgLi4ucHJldi5kb25hdGUsXG4gICAgICAgICAgICAgICAgICAgIFthY3RpdmVDb250cmFjdF06IGdhc0ZlZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgdHJpZ2dlckNhbXBhaWduc1JlZnJlc2goKTtcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2FjdGlvbjtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ29udHJhY3QgQ2FsbCBGYWlsdXJlIVwiLCBlcnJvcik7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBCYXRjaCBkb25hdGUgd2l0aCBnYXMgdHJhY2tpbmdcbiAgICBjb25zdCBiYXRjaERvbmF0ZSA9IGFzeW5jIChpZHMsIGFtb3VudHMpID0+IHtcbiAgICAgICAgY29uc3Qgd2ViM01vZGFsID0gbmV3IFdlbmIzTW9kYWwoKTtcbiAgICAgICAgY29uc3QgY29ubmVjdGlvbiA9IGF3YWl0IHdlYjNNb2RhbC5jb25uZWN0KCk7XG4gICAgICAgIGNvbnN0IHByb3ZpZGVyID0gbmV3IGV0aGVycy5wcm92aWRlcnMuV2ViM1Byb3ZpZGVyKGNvbm5lY3Rpb24pO1xuICAgICAgICBjb25zdCBzaWduZXIgPSBwcm92aWRlci5nZXRTaWduZXIoKTtcbiAgICAgICAgY29uc3QgY29udHJhY3QgPSBmZXRjaENvbnRyYWN0KFxuICAgICAgICAgICAgZ2V0Q3VycmVudENvbnRyYWN0KCkuYWRkcmVzcyxcbiAgICAgICAgICAgIGdldEN1cnJlbnRDb250cmFjdCgpLmFiaSxcbiAgICAgICAgICAgIHNpZ25lclxuICAgICAgICApO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgdG90YWwgdmFsdWUgYW5kIGZvcm1hdCBhbW91bnRzIHByb3Blcmx5XG4gICAgICAgICAgICBjb25zdCB0b3RhbFZhbHVlID0gYW1vdW50cy5yZWR1Y2UoKHN1bSwgYW1vdW50KSA9PiBcbiAgICAgICAgICAgICAgICBzdW0uYWRkKGV0aGVycy51dGlscy5wYXJzZUV0aGVyKGFtb3VudC50b1N0cmluZygpKSksIFxuICAgICAgICAgICAgICAgIGV0aGVycy5CaWdOdW1iZXIuZnJvbSgwKVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgLy8gRm9ybWF0IGFtb3VudHMgZm9yIHRoZSBjb250cmFjdCBjYWxsXG4gICAgICAgICAgICBjb25zdCBmb3JtYXR0ZWRBbW91bnRzID0gYW1vdW50cy5tYXAoYW1vdW50ID0+IFxuICAgICAgICAgICAgICAgIGV0aGVycy51dGlscy5wYXJzZUV0aGVyKGFtb3VudC50b1N0cmluZygpKS50b1N0cmluZygpXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIkNhbXBhaWduIElEczpcIiwgaWRzKTsgLy8gRGVidWcgbG9nXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcIlNlbmRpbmcgYW1vdW50czpcIiwgZm9ybWF0dGVkQW1vdW50cyk7IC8vIERlYnVnIGxvZ1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJUb3RhbCB2YWx1ZTpcIiwgZXRoZXJzLnV0aWxzLmZvcm1hdEV0aGVyKHRvdGFsVmFsdWUpKTsgLy8gRGVidWcgbG9nXG5cbiAgICAgICAgICAgIGxldCB0cmFuc2FjdGlvbjtcbiAgICAgICAgICAgIGxldCBtZXRob2ROYW1lO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBJZiBvbmx5IG9uZSBjYW1wYWlnbiBpcyBzZWxlY3RlZCwgdXNlIHJlZ3VsYXIgZG9uYXRlIGZ1bmN0aW9uXG4gICAgICAgICAgICBpZiAoaWRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiVXNpbmcgc2luZ2xlIGRvbmF0aW9uIGZ1bmN0aW9uXCIpO1xuICAgICAgICAgICAgICAgIG1ldGhvZE5hbWUgPSAnZG9uYXRlVG9DYW1wYWlnbic7XG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24gPSBhd2FpdCBjb250cmFjdC5kb25hdGVUb0NhbXBhaWduKGlkc1swXSwge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdG90YWxWYWx1ZSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gVXNlIGJhdGNoIGRvbmF0aW9uIGZvciBtdWx0aXBsZSBjYW1wYWlnbnNcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIlVzaW5nIGJhdGNoIGRvbmF0aW9uIGZ1bmN0aW9uXCIpO1xuICAgICAgICAgICAgICAgIG1ldGhvZE5hbWUgPSBhY3RpdmVDb250cmFjdCA9PT0gJ2JhdGNoLXByb2Nlc3NpbmcnID8gJ2RvbmF0ZUJhdGNoJyA6ICdiYXRjaERvbmF0ZSc7XG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24gPSBhd2FpdCBjb250cmFjdFttZXRob2ROYW1lXShpZHMsIGZvcm1hdHRlZEFtb3VudHMsIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRvdGFsVmFsdWUsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEdldCBnYXMgZmVlIGJlZm9yZSB3YWl0aW5nIGZvciB0cmFuc2FjdGlvblxuICAgICAgICAgICAgY29uc3QgZ2FzRmVlID0gYXdhaXQgZ2V0R2FzRmVlKHRyYW5zYWN0aW9uKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gVXBkYXRlIGdhcyBmZWVzIHN0YXRlXG4gICAgICAgICAgICBzZXRHYXNGZWVzKHByZXYgPT4gKHtcbiAgICAgICAgICAgICAgICAuLi5wcmV2LFxuICAgICAgICAgICAgICAgIGJhdGNoRG9uYXRlOiB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnByZXYuYmF0Y2hEb25hdGUsXG4gICAgICAgICAgICAgICAgICAgIFthY3RpdmVDb250cmFjdF06IGdhc0ZlZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgLy8gV2FpdCBmb3IgdHJhbnNhY3Rpb24gdG8gYmUgbWluZWRcbiAgICAgICAgICAgIGNvbnN0IHJlY2VpcHQgPSBhd2FpdCB0cmFuc2FjdGlvbi53YWl0KCk7XG5cbiAgICAgICAgICAgIC8vIExvZyB0cmFuc2FjdGlvbiBmb3IgZWFjaCBjYW1wYWlnblxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBjcmVhdGVEb25hdGlvbihcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNhY3Rpb24uaGFzaCxcbiAgICAgICAgICAgICAgICAgICAgaWRzW2ldLFxuICAgICAgICAgICAgICAgICAgICBhbW91bnRzW2ldLFxuICAgICAgICAgICAgICAgICAgICBtZXRob2ROYW1lXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdHJpZ2dlckNhbXBhaWduc1JlZnJlc2goKTtcbiAgICAgICAgICAgIHJldHVybiB0cmFuc2FjdGlvbjtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiQ29udHJhY3QgQ2FsbCBGYWlsdXJlIVwiLCBlcnJvcik7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBDaGVjayBpZiB3YWxsZXQgaXMgY29ubmVjdGVkXG4gICAgY29uc3QgY2hlY2tJZldhbGxldENvbm5lY3RlZCA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghd2luZG93LmV0aGVyZXVtKSByZXR1cm4gY29uc29sZS5sb2coXCJJbnN0YWxsIE1ldGFNYXNrXCIpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBhY2NvdW50cyA9IGF3YWl0IHdpbmRvdy5ldGhlcmV1bS5yZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6IFwiZXRoX2FjY291bnRzXCIsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKGFjY291bnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHNldEN1cnJlbnRBY2NvdW50KGFjY291bnRzWzBdKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJObyBBY2NvdW50IEZvdW5kXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJTb21ldGhpbmcgd3Jvbmcgd2hpbGUgY29ubmVjdGluZyB0byB3YWxsZXQhXCIpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIENvbm5lY3Qgd2FsbGV0XG4gICAgY29uc3QgY29ubmVjdFdhbGxldCA9IGFzeW5jICgpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghd2luZG93LmV0aGVyZXVtKSByZXR1cm4gY29uc29sZS5sb2coXCJJbnN0YWxsIE1ldGFtYXNrIVwiKTtcblxuICAgICAgICAgICAgY29uc3QgYWNjb3VudHMgPSBhd2FpdCB3aW5kb3cuZXRoZXJldW0ucmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgbWV0aG9kOiBcImV0aF9yZXF1ZXN0QWNjb3VudHNcIixcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgc2V0Q3VycmVudEFjY291bnQoYWNjb3VudHNbMF0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJFcnJvciB3aGlsZSBjb25uZWN0aW5nIHRvIHdhbGxldCFcIik7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gRGlzY29ubmVjdCB3YWxsZXRcbiAgICBjb25zdCBkaXNjb25uZWN0V2FsbGV0ID0gYXN5bmMgKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3Qgd2ViM01vZGFsID0gbmV3IFdlbmIzTW9kYWwoKTtcbiAgICAgICAgICAgIC8vIENsZWFyIHRoZSBjYWNoZWQgcHJvdmlkZXJcbiAgICAgICAgICAgIGlmICh3ZWIzTW9kYWwuY2FjaGVkUHJvdmlkZXIpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCB3ZWIzTW9kYWwuY2xlYXJDYWNoZWRQcm92aWRlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gQ2xlYXIgdGhlIGN1cnJlbnQgYWNjb3VudFxuICAgICAgICAgICAgc2V0Q3VycmVudEFjY291bnQoXCJcIik7XG4gICAgICAgICAgICAvLyBDbGVhciBhbnkgc3RvcmVkIHdhbGxldCBkYXRhIGluIGxvY2FsU3RvcmFnZVxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0oJ1dFQjNfQ09OTkVDVF9DQUNIRURfUFJPVklERVInKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gUmVxdWVzdCBNZXRhTWFzayB0byBkaXNjb25uZWN0XG4gICAgICAgICAgICBpZiAod2luZG93LmV0aGVyZXVtKSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgd2luZG93LmV0aGVyZXVtLnJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwid2FsbGV0X3JlcXVlc3RQZXJtaXNzaW9uc1wiLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IFt7IGV0aF9hY2NvdW50czoge30gfV1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gRm9yY2UgcmVsb2FkIHRoZSBwYWdlIHRvIGNsZWFyIGFueSByZW1haW5pbmcgc3RhdGVcbiAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZWxvYWQoKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRXJyb3Igd2hpbGUgZGlzY29ubmVjdGluZyB3YWxsZXQhXCIsIGVycm9yKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjaGVja0lmV2FsbGV0Q29ubmVjdGVkKCk7XG5cbiAgICAgICAgLy8gQWRkIGV2ZW50IGxpc3RlbmVycyBmb3IgTWV0YU1hc2tcbiAgICAgICAgaWYgKHdpbmRvdy5ldGhlcmV1bSkge1xuICAgICAgICAgICAgLy8gTGlzdGVuIGZvciBhY2NvdW50IGNoYW5nZXNcbiAgICAgICAgICAgIHdpbmRvdy5ldGhlcmV1bS5vbignYWNjb3VudHNDaGFuZ2VkJywgKGFjY291bnRzKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGFjY291bnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBVc2VyIGRpc2Nvbm5lY3RlZCB0aGVpciB3YWxsZXRcbiAgICAgICAgICAgICAgICAgICAgc2V0Q3VycmVudEFjY291bnQoXCJcIik7XG4gICAgICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdXRUIzX0NPTk5FQ1RfQ0FDSEVEX1BST1ZJREVSJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVXNlciBzd2l0Y2hlZCBhY2NvdW50c1xuICAgICAgICAgICAgICAgICAgICBzZXRDdXJyZW50QWNjb3VudChhY2NvdW50c1swXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIExpc3RlbiBmb3IgY2hhaW4gY2hhbmdlc1xuICAgICAgICAgICAgd2luZG93LmV0aGVyZXVtLm9uKCdjaGFpbkNoYW5nZWQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlbG9hZCgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIExpc3RlbiBmb3IgZGlzY29ubmVjdFxuICAgICAgICAgICAgd2luZG93LmV0aGVyZXVtLm9uKCdkaXNjb25uZWN0JywgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHNldEN1cnJlbnRBY2NvdW50KFwiXCIpO1xuICAgICAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKCdXRUIzX0NPTk5FQ1RfQ0FDSEVEX1BST1ZJREVSJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENsZWFudXAgZnVuY3Rpb25cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIGlmICh3aW5kb3cuZXRoZXJldW0pIHtcbiAgICAgICAgICAgICAgICB3aW5kb3cuZXRoZXJldW0ucmVtb3ZlQWxsTGlzdGVuZXJzKCdhY2NvdW50c0NoYW5nZWQnKTtcbiAgICAgICAgICAgICAgICB3aW5kb3cuZXRoZXJldW0ucmVtb3ZlQWxsTGlzdGVuZXJzKCdjaGFpbkNoYW5nZWQnKTtcbiAgICAgICAgICAgICAgICB3aW5kb3cuZXRoZXJldW0ucmVtb3ZlQWxsTGlzdGVuZXJzKCdkaXNjb25uZWN0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSwgW10pO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPE11bHRpQ29udHJhY3RDb250ZXh0LlByb3ZpZGVyXG4gICAgICAgICAgICB2YWx1ZT17e1xuICAgICAgICAgICAgICAgIGN1cnJlbnRBY2NvdW50LFxuICAgICAgICAgICAgICAgIGFjdGl2ZUNvbnRyYWN0LFxuICAgICAgICAgICAgICAgIGdhc0ZlZXMsXG4gICAgICAgICAgICAgICAgdGl0bGVEYXRhLFxuICAgICAgICAgICAgICAgIHN3aXRjaENvbnRyYWN0LFxuICAgICAgICAgICAgICAgIGNyZWF0ZUNhbXBhaWduLFxuICAgICAgICAgICAgICAgIGdldENhbXBhaWducyxcbiAgICAgICAgICAgICAgICBnZXRVc2VyQ2FtcGFpZ25zLFxuICAgICAgICAgICAgICAgIGRvbmF0ZSxcbiAgICAgICAgICAgICAgICBiYXRjaERvbmF0ZSxcbiAgICAgICAgICAgICAgICBnZXREb25hdGlvbnMsXG4gICAgICAgICAgICAgICAgY29ubmVjdFdhbGxldCxcbiAgICAgICAgICAgICAgICBkaXNjb25uZWN0V2FsbGV0LFxuICAgICAgICAgICAgICAgIGdldEN1cnJlbnRDb250cmFjdCxcbiAgICAgICAgICAgICAgICBjYW1wYWlnbnNVcGRhdGVkRmxhZyxcbiAgICAgICAgICAgICAgICBnZXRFdGhQcmljZVxuICAgICAgICAgICAgfX1cbiAgICAgICAgPlxuICAgICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L011bHRpQ29udHJhY3RDb250ZXh0LlByb3ZpZGVyPlxuICAgICk7XG59OyAiXSwibmFtZXMiOlsiUmVhY3QiLCJ1c2VTdGF0ZSIsInVzZUVmZmVjdCIsImNyZWF0ZUNvbnRleHQiLCJXZW5iM01vZGFsIiwiZXRoZXJzIiwiQ09OVFJBQ1RTIiwiTXVsdGlDb250cmFjdENvbnRleHQiLCJmZXRjaENvbnRyYWN0IiwiYWRkcmVzcyIsImFiaSIsInNpZ25lck9yUHJvdmlkZXIiLCJDb250cmFjdCIsIk11bHRpQ29udHJhY3RQcm92aWRlciIsImNoaWxkcmVuIiwiY3VycmVudEFjY291bnQiLCJzZXRDdXJyZW50QWNjb3VudCIsImFjdGl2ZUNvbnRyYWN0Iiwic2V0QWN0aXZlQ29udHJhY3QiLCJnYXNGZWVzIiwic2V0R2FzRmVlcyIsInRpdGxlRGF0YSIsInNldFRpdGxlRGF0YSIsInRpdGxlIiwiZGVzY3JpcHRpb24iLCJjYW1wYWlnbnNVcGRhdGVkRmxhZyIsInNldENhbXBhaWduc1VwZGF0ZWRGbGFnIiwidHJpZ2dlckNhbXBhaWduc1JlZnJlc2giLCJwcmV2IiwiY29uc29sZSIsImxvZyIsImdldEN1cnJlbnRDb250cmFjdCIsInN3aXRjaENvbnRyYWN0IiwiY29udHJhY3RUeXBlIiwiZ2V0RXRoUHJpY2UiLCJyZXNwb25zZSIsImZldGNoIiwiZGF0YSIsImpzb24iLCJwcmljZSIsImV0aGVyZXVtIiwidXNkIiwiRXJyb3IiLCJlcnJvciIsIndhcm4iLCJnZXRUcmFuc2FjdGlvbkZyb21FdGhlcnNjYW4iLCJ0eEhhc2giLCJyZXN1bHQiLCJnZXRUcmFuc2FjdGlvblJlY2VpcHRGcm9tRXRoZXJzY2FuIiwiZ2V0R2FzRmVlIiwidHJhbnNhY3Rpb24iLCJwcm92aWRlciIsImZlZURhdGEiLCJnZXRGZWVEYXRhIiwiZ2FzUHJpY2UiLCJtYXhGZWVQZXJHYXMiLCJnYXNMaW1pdCIsImVzdGltYXRlR2FzIiwiZ2FzRmVlIiwibXVsIiwiZXRoUHJpY2UiLCJnYXNGZWVJbkV0aCIsInV0aWxzIiwiZm9ybWF0RXRoZXIiLCJnYXNGZWVJblVzZCIsInBhcnNlRmxvYXQiLCJ0b0ZpeGVkIiwiZXRoIiwic3RvcmVHYXNGZWUiLCJzdG9yZWRGZWVzIiwiSlNPTiIsInBhcnNlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInNldEl0ZW0iLCJzdHJpbmdpZnkiLCJnZXRTdG9yZWRHYXNGZWUiLCJmZWUiLCJjcmVhdGVDYW1wYWlnbiIsImNhbXBhaWduIiwiYW1vdW50IiwiZGVhZGxpbmUiLCJ3ZWIzTW9kYWwiLCJjb25uZWN0aW9uIiwiY29ubmVjdCIsInByb3ZpZGVycyIsIldlYjNQcm92aWRlciIsInNpZ25lciIsImdldFNpZ25lciIsImNvbnRyYWN0IiwicGFyc2VVbml0cyIsIkRhdGUiLCJnZXRUaW1lIiwid2FpdCIsImdldENhbXBhaWducyIsImNhbXBhaWducyIsInBhcnNlZENhbXBhaWducyIsIm1hcCIsImkiLCJvd25lciIsInRhcmdldCIsInRvU3RyaW5nIiwidG9OdW1iZXIiLCJhbW91bnRDb2xsZWN0ZWQiLCJwSWQiLCJjb250cmFjdFZlcnNpb24iLCJnZXRVc2VyQ2FtcGFpZ25zIiwiYWxsQ2FtcGFpZ25zIiwiYWNjb3VudHMiLCJ3aW5kb3ciLCJyZXF1ZXN0IiwibWV0aG9kIiwiY3VycmVudFVzZXIiLCJmaWx0ZXJlZENhbXBhaWducyIsImZpbHRlciIsInRvTG93ZXJDYXNlIiwidXNlckRhdGEiLCJnZXREb25hdGlvbnMiLCJkb25hdGlvbnMiLCJnZXREb25hdG9ycyIsIm51bWJlck9mRG9uYXRpb25zIiwibGVuZ3RoIiwicGFyc2VkRG9uYXRpb25zIiwiZG9uYXRvckFkZHJlc3MiLCJkb25hdGlvbkFtb3VudCIsImZpbHRlcnMiLCJEb25hdGVkIiwiZXZlbnRzIiwicXVlcnlGaWx0ZXIiLCJtYXRjaGluZ0V2ZW50IiwiZmluZCIsImV2ZW50IiwiZXZlbnRBbW91bnQiLCJhcmdzIiwidHJhbnNhY3Rpb25IYXNoIiwic3RvcmVkRmVlIiwidHgiLCJnZXRUcmFuc2FjdGlvbiIsInJlY2VpcHQiLCJnZXRUcmFuc2FjdGlvblJlY2VpcHQiLCJnYXNVc2VkIiwiZWZmZWN0aXZlR2FzUHJpY2UiLCJnYXNGZWVJbldlaSIsImRvbmF0aW9uIiwiZG9uYXRvciIsInB1c2giLCJkb25hdGUiLCJkb25hdGVUb0NhbXBhaWduIiwidmFsdWUiLCJwYXJzZUV0aGVyIiwiaGFzaCIsImJhdGNoRG9uYXRlIiwiaWRzIiwiYW1vdW50cyIsInRvdGFsVmFsdWUiLCJyZWR1Y2UiLCJzdW0iLCJhZGQiLCJCaWdOdW1iZXIiLCJmcm9tIiwiZm9ybWF0dGVkQW1vdW50cyIsIm1ldGhvZE5hbWUiLCJjcmVhdGVEb25hdGlvbiIsImNoZWNrSWZXYWxsZXRDb25uZWN0ZWQiLCJjb25uZWN0V2FsbGV0IiwiZGlzY29ubmVjdFdhbGxldCIsImNhY2hlZFByb3ZpZGVyIiwiY2xlYXJDYWNoZWRQcm92aWRlciIsInJlbW92ZUl0ZW0iLCJwYXJhbXMiLCJldGhfYWNjb3VudHMiLCJsb2NhdGlvbiIsInJlbG9hZCIsIm9uIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwiUHJvdmlkZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./Context/MultiContractContext.js\n"));

/***/ }),

/***/ "./utils/ethPrice.js":
/*!***************************!*\
  !*** ./utils/ethPrice.js ***!
  \***************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"getEthPrice\": function() { return /* binding */ getEthPrice; }\n/* harmony export */ });\nconst getEthPrice = async ()=>{\n    try {\n        const response = await fetch(\"/api/eth-price\");\n        const data = await response.json();\n        const price = data.ethereum.usd;\n        if (!price || price <= 0) {\n            throw new Error(\"Invalid price from API\");\n        }\n        return price;\n    } catch (error) {\n        console.warn(\"Failed to fetch ETH price, using fallback value:\", error);\n        return 2500; // Fallback value in USD\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi91dGlscy9ldGhQcmljZS5qcy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU8sTUFBTUEsY0FBYyxVQUFZO0lBQ25DLElBQUk7UUFDQSxNQUFNQyxXQUFXLE1BQU1DLE1BQU07UUFDN0IsTUFBTUMsT0FBTyxNQUFNRixTQUFTRyxJQUFJO1FBQ2hDLE1BQU1DLFFBQVFGLEtBQUtHLFFBQVEsQ0FBQ0MsR0FBRztRQUMvQixJQUFJLENBQUNGLFNBQVNBLFNBQVMsR0FBRztZQUN0QixNQUFNLElBQUlHLE1BQU0sMEJBQTBCO1FBQzlDLENBQUM7UUFDRCxPQUFPSDtJQUNYLEVBQUUsT0FBT0ksT0FBTztRQUNaQyxRQUFRQyxJQUFJLENBQUMsb0RBQW9ERjtRQUNqRSxPQUFPLE1BQU0sd0JBQXdCO0lBQ3pDO0FBQ0osRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL19OX0UvLi91dGlscy9ldGhQcmljZS5qcz8yNjY2Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBnZXRFdGhQcmljZSA9IGFzeW5jICgpID0+IHtcbiAgICB0cnkge1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKCcvYXBpL2V0aC1wcmljZScpO1xuICAgICAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICBjb25zdCBwcmljZSA9IGRhdGEuZXRoZXJldW0udXNkO1xuICAgICAgICBpZiAoIXByaWNlIHx8IHByaWNlIDw9IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcHJpY2UgZnJvbSBBUElcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHByaWNlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIkZhaWxlZCB0byBmZXRjaCBFVEggcHJpY2UsIHVzaW5nIGZhbGxiYWNrIHZhbHVlOlwiLCBlcnJvcik7XG4gICAgICAgIHJldHVybiAyNTAwOyAvLyBGYWxsYmFjayB2YWx1ZSBpbiBVU0RcbiAgICB9XG59OyAiXSwibmFtZXMiOlsiZ2V0RXRoUHJpY2UiLCJyZXNwb25zZSIsImZldGNoIiwiZGF0YSIsImpzb24iLCJwcmljZSIsImV0aGVyZXVtIiwidXNkIiwiRXJyb3IiLCJlcnJvciIsImNvbnNvbGUiLCJ3YXJuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./utils/ethPrice.js\n"));

/***/ })

});